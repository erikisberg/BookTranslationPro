{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BookTranslationPro Developer Documentation","text":"<p>Welcome to the technical documentation for BookTranslationPro, a comprehensive book translation management platform.</p>"},{"location":"#overview","title":"Overview","text":"<p>BookTranslationPro is a web-based application designed to streamline the book translation process, from document upload through translation to final export. The platform integrates AI technologies to enhance translation quality while providing a collaborative environment for translators.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Document Management: Upload, organize, and version documents for translation</li> <li>Translation Workspace: Translate documents page-by-page with intuitive UI</li> <li>AI Integration: Machine translation with DeepL and review with OpenAI</li> <li>Glossary Management: Maintain consistent terminology across translations</li> <li>Translation Memory: Reuse previous translations to improve efficiency</li> <li>Export Options: Export translated documents in various formats (PDF, DOCX, HTML, TXT)</li> <li>Collaboration: Track changes and manage document versions</li> </ul>"},{"location":"#technical-stack","title":"Technical Stack","text":"<ul> <li>Backend: Python with Flask web framework</li> <li>Database: PostgreSQL via Supabase</li> <li>Authentication: Supabase Auth with session management</li> <li>Frontend: Flask Templates with Bootstrap 5, JavaScript</li> <li>AI Services: DeepL API for translation, OpenAI for review</li> <li>Document Processing: Various libraries for text extraction and format conversion</li> </ul>"},{"location":"#for-developers","title":"For Developers","text":"<p>This documentation provides comprehensive information about the system architecture, API integrations, database schema, and core modules to help developers understand, maintain, and extend the platform.</p> <p>Navigate through the sections using the navigation menu to learn about specific aspects of the system.</p>"},{"location":"api/deepl/","title":"DeepL Integration","text":"<p>BookTranslationPro uses DeepL's API for high-quality machine translation of documents.</p>"},{"location":"api/deepl/#overview","title":"Overview","text":"<p>The DeepL integration provides:</p> <ol> <li>Initial machine translation of uploaded documents</li> <li>Support for multiple language pairs</li> <li>Glossary-enhanced translations for terminology consistency</li> <li>Formality control for appropriate style</li> </ol>"},{"location":"api/deepl/#api-configuration","title":"API Configuration","text":""},{"location":"api/deepl/#required-environment-variables","title":"Required Environment Variables","text":"<pre><code>DEEPL_API_KEY=your_deepl_api_key\n</code></pre>"},{"location":"api/deepl/#supported-languages","title":"Supported Languages","text":"<p>The application supports all language pairs available through DeepL, which currently includes:</p> Language Code Language Name EN English DE German FR French ES Spanish IT Italian NL Dutch PL Polish PT Portuguese RU Russian JA Japanese ZH Chinese ... (and more)"},{"location":"api/deepl/#integration-implementation","title":"Integration Implementation","text":""},{"location":"api/deepl/#translation-function","title":"Translation Function","text":"<p>The core translation function manages DeepL API interactions:</p> <pre><code>def translate_text_with_deepl(text, source_lang, target_lang, glossary_id=None, formality=\"default\"):\n    \"\"\"\n    Translates text using the DeepL API\n\n    Args:\n        text (str): Text to translate\n        source_lang (str): Source language code\n        target_lang (str): Target language code\n        glossary_id (str, optional): DeepL glossary ID to use\n        formality (str, optional): Formality level (default, more, less, prefer_more, prefer_less)\n\n    Returns:\n        str: Translated text\n    \"\"\"\n    try:\n        # Initialize DeepL API client\n        translator = deepl.Translator(os.environ[\"DEEPL_API_KEY\"])\n\n        # Prepare translation parameters\n        params = {\n            \"text\": text,\n            \"source_lang\": source_lang.upper(),\n            \"target_lang\": target_lang.upper(),\n            \"formality\": formality\n        }\n\n        # Add glossary if specified\n        if glossary_id:\n            params[\"glossary_id\"] = glossary_id\n\n        # Execute translation with retry mechanism\n        result = execute_with_retry(\n            lambda: translator.translate_text(**params),\n            max_retries=3\n        )\n\n        return result.text if result else \"\"\n\n    except deepl.exceptions.DeepLException as e:\n        logger.error(f\"DeepL translation error: {e}\")\n        # Handle specific error types\n        if \"quota\" in str(e).lower():\n            raise QuotaExceededException(\"DeepL API quota exceeded\")\n        raise TranslationException(f\"DeepL translation failed: {e}\")\n</code></pre>"},{"location":"api/deepl/#batch-document-translation","title":"Batch Document Translation","text":"<p>For efficient document translation, we use batch processing:</p> <pre><code>def translate_document_pages(document_id, batch_size=10):\n    \"\"\"\n    Translates all pages of a document in batches\n\n    Args:\n        document_id (str): ID of document to translate\n        batch_size (int): Number of pages to translate in each batch\n\n    Returns:\n        bool: True if translation completed successfully\n    \"\"\"\n    # Get document details\n    document = get_document_by_id(document_id)\n    source_lang = document[\"language\"]\n    target_lang = document[\"target_lang\"]\n\n    # Get document pages\n    pages = get_document_pages(document_id)\n\n    # Process pages in batches\n    for i in range(0, len(pages), batch_size):\n        batch = pages[i:i+batch_size]\n\n        # Translate each page in the batch\n        for page in batch:\n            # Check if page already has a translation\n            if page[\"translated_text\"]:\n                continue\n\n            # Check translation memory first\n            tm_result = check_translation_memory(page[\"source_text\"], source_lang, target_lang)\n            if tm_result:\n                # Use translation memory result\n                update_page_translation(page[\"id\"], tm_result)\n                continue\n\n            # Translate with DeepL\n            glossary_id = get_document_glossary_id(document_id)\n            translated_text = translate_text_with_deepl(\n                page[\"source_text\"], \n                source_lang, \n                target_lang, \n                glossary_id=glossary_id\n            )\n\n            # Update page with translation\n            update_page_translation(page[\"id\"], translated_text)\n\n            # Update translation memory\n            add_to_translation_memory(\n                page[\"source_text\"], \n                translated_text, \n                source_lang, \n                target_lang,\n                document[\"user_id\"]\n            )\n\n    # Update document status\n    update_document_status(document_id, \"machine_translated\")\n    return True\n</code></pre>"},{"location":"api/deepl/#glossary-management","title":"Glossary Management","text":"<p>The application integrates with DeepL's glossary feature:</p> <pre><code>def create_deepl_glossary(name, source_lang, target_lang, entries):\n    \"\"\"\n    Creates a glossary in DeepL\n\n    Args:\n        name (str): Glossary name\n        source_lang (str): Source language code\n        target_lang (str): Target language code\n        entries (dict): Dictionary of source:target term pairs\n\n    Returns:\n        str: DeepL glossary ID\n    \"\"\"\n    translator = deepl.Translator(os.environ[\"DEEPL_API_KEY\"])\n\n    # Format entries for DeepL\n    entry_list = []\n    for source, target in entries.items():\n        entry_list.append(f\"{source}\\t{target}\")\n\n    # Create the glossary\n    glossary = translator.create_glossary(\n        name=name,\n        source_lang=source_lang.upper(),\n        target_lang=target_lang.upper(),\n        entries=\"\\n\".join(entry_list)\n    )\n\n    return glossary.glossary_id\n</code></pre>"},{"location":"api/deepl/#error-handling","title":"Error Handling","text":"<p>The DeepL integration implements comprehensive error handling:</p> <pre><code>def execute_with_retry(func, max_retries=3, initial_delay=1):\n    \"\"\"\n    Execute a function with retry logic for API calls\n\n    Args:\n        func: Function to execute\n        max_retries: Maximum retry attempts\n        initial_delay: Initial delay between retries (seconds)\n\n    Returns:\n        Result from the function or None if all retries fail\n    \"\"\"\n    retries = 0\n    last_exception = None\n\n    while retries &lt;= max_retries:\n        try:\n            return func()\n        except (deepl.exceptions.ConnectionException, \n                deepl.exceptions.TooManyRequestsException) as e:\n            last_exception = e\n            retries += 1\n\n            if retries &gt; max_retries:\n                break\n\n            # Exponential backoff with jitter\n            delay = initial_delay * (2 ** (retries - 1)) * (0.5 + random.random())\n            time.sleep(delay)\n\n    logger.error(f\"Failed after {max_retries} retries: {last_exception}\")\n    return None\n</code></pre>"},{"location":"api/deepl/#api-limits-and-performance","title":"API Limits and Performance","text":"<p>The application manages DeepL API usage efficiently:</p> <ol> <li>Usage Tracking: Monitors DeepL API usage to prevent quota overruns</li> <li>Translation Memory: Reduces redundant translations by storing previous results</li> <li>Batch Processing: Translates documents in parallel batches for efficiency</li> <li>Caching: Implements response caching for frequently translated segments</li> </ol> <pre><code>def get_deepl_usage():\n    \"\"\"\n    Checks DeepL API usage statistics\n\n    Returns:\n        dict: Usage statistics including character count and limits\n    \"\"\"\n    translator = deepl.Translator(os.environ[\"DEEPL_API_KEY\"])\n    usage = translator.get_usage()\n\n    return {\n        \"character_count\": usage.character_count,\n        \"character_limit\": usage.character_limit,\n        \"percent_used\": (usage.character_count / usage.character_limit) * 100 if usage.character_limit else 0\n    }\n</code></pre>"},{"location":"api/deepl/#related-components","title":"Related Components","text":"<ul> <li>Translation Module: Core integration point for DeepL services</li> <li>Glossary Management: Creates and manages DeepL glossaries</li> <li>Translation Memory: Complements DeepL with stored translations</li> </ul>"},{"location":"api/internal/","title":"Internal API","text":"<p>BookTranslationPro implements several internal API endpoints for frontend-backend communication. This document outlines these endpoints, their parameters, and response formats.</p>"},{"location":"api/internal/#api-overview","title":"API Overview","text":"<p>The internal API provides endpoints for:</p> <ol> <li>Document management</li> <li>Translation operations</li> <li>Glossary and translation memory management</li> <li>User settings and preferences</li> <li>Export functionality</li> </ol>"},{"location":"api/internal/#authentication","title":"Authentication","text":"<p>All API endpoints require authentication, which is handled through Flask sessions. The <code>@login_required</code> decorator enforces this requirement.</p> <pre><code>@app.route('/api/user/profile', methods=['GET'])\n@login_required\ndef get_user_profile():\n    # This endpoint requires authentication\n    user_id = session.get('user_id')\n    # ...\n</code></pre>"},{"location":"api/internal/#common-response-format","title":"Common Response Format","text":"<p>All API endpoints follow a common JSON response format:</p> <pre><code>{\n  \"success\": true|false,\n  \"data\": { ... },  // Present on success\n  \"error\": \"Error message\"  // Present on failure\n}\n</code></pre>"},{"location":"api/internal/#document-management-api","title":"Document Management API","text":""},{"location":"api/internal/#get-documents-list","title":"Get Documents List","text":"<p>Retrieves a list of documents for the current user, with optional filtering.</p> <p>Endpoint: <code>GET /api/documents</code></p> <p>Query Parameters: - <code>folder</code> (optional): Filter by folder name - <code>language</code> (optional): Filter by source language - <code>status</code> (optional): Filter by document status</p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"documents\": [\n      {\n        \"id\": \"doc-uuid\",\n        \"title\": \"Document Title\",\n        \"folder\": \"Folder Name\",\n        \"language\": \"en\",\n        \"target_lang\": \"fr\",\n        \"status\": \"in_progress\",\n        \"created_at\": \"2023-03-15T12:00:00Z\",\n        \"updated_at\": \"2023-03-16T10:00:00Z\",\n        \"page_count\": 5,\n        \"completion_percentage\": 60\n      },\n      // Additional documents...\n    ]\n  }\n}\n</code></pre></p>"},{"location":"api/internal/#get-document-details","title":"Get Document Details","text":"<p>Retrieves detailed information about a specific document.</p> <p>Endpoint: <code>GET /api/documents/&lt;document_id&gt;</code></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"document\": {\n      \"id\": \"doc-uuid\",\n      \"title\": \"Document Title\",\n      \"folder\": \"Folder Name\",\n      \"language\": \"en\",\n      \"target_lang\": \"fr\",\n      \"status\": \"in_progress\",\n      \"created_at\": \"2023-03-15T12:00:00Z\",\n      \"updated_at\": \"2023-03-16T10:00:00Z\",\n      \"user_id\": \"user-uuid\"\n    },\n    \"pages\": [\n      {\n        \"id\": \"page-uuid\",\n        \"page_number\": 1,\n        \"status\": \"translated\",\n        \"has_content\": true\n      },\n      // Additional pages...\n    ],\n    \"versions\": [\n      {\n        \"version\": 1,\n        \"created_at\": \"2023-03-15T12:00:00Z\"\n      },\n      // Additional versions...\n    ]\n  }\n}\n</code></pre></p>"},{"location":"api/internal/#create-document","title":"Create Document","text":"<p>Creates a new document from an uploaded file.</p> <p>Endpoint: <code>POST /api/documents</code></p> <p>Content Type: <code>multipart/form-data</code></p> <p>Form Parameters: - <code>file</code>: Document file - <code>title</code>: Document title - <code>language</code>: Source language code - <code>target_lang</code>: Target language code - <code>folder</code> (optional): Folder/category name</p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"document_id\": \"doc-uuid\",\n    \"title\": \"Document Title\",\n    \"page_count\": 5,\n    \"status\": \"processing\"\n  }\n}\n</code></pre></p>"},{"location":"api/internal/#update-document","title":"Update Document","text":"<p>Updates document metadata.</p> <p>Endpoint: <code>PUT /api/documents/&lt;document_id&gt;</code></p> <p>Request Body: <pre><code>{\n  \"title\": \"Updated Title\",\n  \"folder\": \"New Folder\",\n  \"target_lang\": \"es\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"document_id\": \"doc-uuid\",\n    \"updated_fields\": [\"title\", \"folder\", \"target_lang\"]\n  }\n}\n</code></pre></p>"},{"location":"api/internal/#delete-document","title":"Delete Document","text":"<p>Deletes a document and all its pages.</p> <p>Endpoint: <code>DELETE /api/documents/&lt;document_id&gt;</code></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"message\": \"Document deleted successfully\"\n  }\n}\n</code></pre></p>"},{"location":"api/internal/#document-pages-api","title":"Document Pages API","text":""},{"location":"api/internal/#get-document-page","title":"Get Document Page","text":"<p>Retrieves content for a specific page of a document.</p> <p>Endpoint: <code>GET /api/documents/&lt;document_id&gt;/pages/&lt;page_number&gt;</code></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"page\": {\n      \"id\": \"page-uuid\",\n      \"document_id\": \"doc-uuid\",\n      \"page_number\": 1,\n      \"source_text\": \"Original text content\",\n      \"translated_text\": \"Translated text content\",\n      \"status\": \"translated\",\n      \"created_at\": \"2023-03-15T12:00:00Z\",\n      \"updated_at\": \"2023-03-16T10:00:00Z\"\n    }\n  }\n}\n</code></pre></p>"},{"location":"api/internal/#update-page-translation","title":"Update Page Translation","text":"<p>Updates the translation for a document page.</p> <p>Endpoint: <code>PUT /api/documents/&lt;document_id&gt;/pages/&lt;page_number&gt;</code></p> <p>Request Body: <pre><code>{\n  \"translated_text\": \"Updated translation content\",\n  \"status\": \"translated\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"page_id\": \"page-uuid\",\n    \"document_id\": \"doc-uuid\",\n    \"page_number\": 1,\n    \"updated_at\": \"2023-03-16T12:00:00Z\"\n  }\n}\n</code></pre></p>"},{"location":"api/internal/#translation-api","title":"Translation API","text":""},{"location":"api/internal/#translate-document","title":"Translate Document","text":"<p>Initiates machine translation for a document.</p> <p>Endpoint: <code>POST /api/translate/document/&lt;document_id&gt;</code></p> <p>Request Body: <pre><code>{\n  \"use_glossary\": true,\n  \"use_translation_memory\": true\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"job_id\": \"job-uuid\",\n    \"status\": \"processing\",\n    \"message\": \"Translation started\"\n  }\n}\n</code></pre></p>"},{"location":"api/internal/#translate-page","title":"Translate Page","text":"<p>Translates a specific page using machine translation.</p> <p>Endpoint: <code>POST /api/translate/page/&lt;page_id&gt;</code></p> <p>Request Body: <pre><code>{\n  \"use_glossary\": true,\n  \"use_translation_memory\": true\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"page_id\": \"page-uuid\",\n    \"document_id\": \"doc-uuid\",\n    \"page_number\": 1,\n    \"translated_text\": \"Translated content\",\n    \"status\": \"machine_translated\"\n  }\n}\n</code></pre></p>"},{"location":"api/internal/#review-translation","title":"Review Translation","text":"<p>Requests AI review of a translation.</p> <p>Endpoint: <code>POST /api/translate/review/&lt;page_id&gt;</code></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"review\": {\n      \"page_id\": \"page-uuid\",\n      \"accuracy\": \"The translation accurately captures the original meaning.\",\n      \"style\": \"Consider using more idiomatic expressions in the target language.\",\n      \"terminology\": \"Several technical terms could be improved for consistency.\",\n      \"suggestions\": [\n        {\n          \"original\": \"technical approach\",\n          \"suggestion\": \"approche technique\"\n        },\n        // Additional suggestions...\n      ],\n      \"overall_score\": 8.5\n    }\n  }\n}\n</code></pre></p>"},{"location":"api/internal/#glossary-api","title":"Glossary API","text":""},{"location":"api/internal/#get-glossaries","title":"Get Glossaries","text":"<p>Retrieves the user's glossaries.</p> <p>Endpoint: <code>GET /api/glossaries</code></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"glossaries\": [\n      {\n        \"id\": \"glossary-uuid\",\n        \"name\": \"Technical Terms\",\n        \"source_lang\": \"en\",\n        \"target_lang\": \"fr\",\n        \"entry_count\": 25,\n        \"created_at\": \"2023-03-10T12:00:00Z\"\n      },\n      // Additional glossaries...\n    ]\n  }\n}\n</code></pre></p>"},{"location":"api/internal/#get-glossary-entries","title":"Get Glossary Entries","text":"<p>Retrieves entries for a specific glossary.</p> <p>Endpoint: <code>GET /api/glossaries/&lt;glossary_id&gt;/entries</code></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"glossary\": {\n      \"id\": \"glossary-uuid\",\n      \"name\": \"Technical Terms\",\n      \"source_lang\": \"en\",\n      \"target_lang\": \"fr\"\n    },\n    \"entries\": [\n      {\n        \"id\": \"entry-uuid\",\n        \"source_term\": \"API\",\n        \"target_term\": \"API\",\n        \"created_at\": \"2023-03-10T12:00:00Z\"\n      },\n      // Additional entries...\n    ]\n  }\n}\n</code></pre></p>"},{"location":"api/internal/#create-glossary","title":"Create Glossary","text":"<p>Creates a new glossary.</p> <p>Endpoint: <code>POST /api/glossaries</code></p> <p>Request Body: <pre><code>{\n  \"name\": \"Literary Terms\",\n  \"source_lang\": \"en\",\n  \"target_lang\": \"es\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"glossary_id\": \"glossary-uuid\",\n    \"name\": \"Literary Terms\",\n    \"source_lang\": \"en\",\n    \"target_lang\": \"es\",\n    \"created_at\": \"2023-03-18T12:00:00Z\"\n  }\n}\n</code></pre></p>"},{"location":"api/internal/#add-glossary-entry","title":"Add Glossary Entry","text":"<p>Adds a new entry to a glossary.</p> <p>Endpoint: <code>POST /api/glossaries/&lt;glossary_id&gt;/entries</code></p> <p>Request Body: <pre><code>{\n  \"source_term\": \"protagonist\",\n  \"target_term\": \"protagonista\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"entry_id\": \"entry-uuid\",\n    \"glossary_id\": \"glossary-uuid\",\n    \"source_term\": \"protagonist\",\n    \"target_term\": \"protagonista\"\n  }\n}\n</code></pre></p>"},{"location":"api/internal/#translation-memory-api","title":"Translation Memory API","text":""},{"location":"api/internal/#search-translation-memory","title":"Search Translation Memory","text":"<p>Searches the translation memory for similar segments.</p> <p>Endpoint: <code>GET /api/translation-memory/search</code></p> <p>Query Parameters: - <code>text</code>: Text to search for - <code>source_lang</code>: Source language code - <code>target_lang</code>: Target language code - <code>min_similarity</code> (optional): Minimum similarity score (0-100)</p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"results\": [\n      {\n        \"id\": \"tm-uuid\",\n        \"source_text\": \"Original text segment\",\n        \"translated_text\": \"Translated text segment\",\n        \"similarity\": 95,\n        \"created_at\": \"2023-03-10T12:00:00Z\"\n      },\n      // Additional results...\n    ]\n  }\n}\n</code></pre></p>"},{"location":"api/internal/#add-to-translation-memory","title":"Add to Translation Memory","text":"<p>Adds an entry to the translation memory.</p> <p>Endpoint: <code>POST /api/translation-memory/entries</code></p> <p>Request Body: <pre><code>{\n  \"source_text\": \"This is a sample text.\",\n  \"translated_text\": \"Ceci est un exemple de texte.\",\n  \"source_lang\": \"en\",\n  \"target_lang\": \"fr\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"entry_id\": \"tm-uuid\",\n    \"created_at\": \"2023-03-18T12:00:00Z\"\n  }\n}\n</code></pre></p>"},{"location":"api/internal/#export-api","title":"Export API","text":""},{"location":"api/internal/#export-document","title":"Export Document","text":"<p>Exports a document in the specified format.</p> <p>Endpoint: <code>POST /api/export/&lt;document_id&gt;</code></p> <p>Request Body: <pre><code>{\n  \"format\": \"docx\",\n  \"include_original\": false,\n  \"include_notes\": false\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"export_url\": \"/download/exports/document-name.docx\",\n    \"format\": \"docx\",\n    \"expires_at\": \"2023-03-18T14:00:00Z\"\n  }\n}\n</code></pre></p>"},{"location":"api/internal/#error-handling","title":"Error Handling","text":"<p>When an error occurs, the API returns a JSON response with <code>success: false</code> and an error message:</p> <pre><code>{\n  \"success\": false,\n  \"error\": \"Document not found\",\n  \"code\": \"NOT_FOUND\"\n}\n</code></pre> <p>Common error codes:</p> Code Description <code>UNAUTHORIZED</code> User is not authenticated <code>FORBIDDEN</code> User is not authorized to access the resource <code>NOT_FOUND</code> Requested resource not found <code>BAD_REQUEST</code> Invalid request parameters <code>VALIDATION_ERROR</code> Request validation failed <code>API_ERROR</code> Error from external API (DeepL, OpenAI) <code>SERVER_ERROR</code> Internal server error"},{"location":"api/internal/#rate-limiting","title":"Rate Limiting","text":"<p>API endpoints implement rate limiting to prevent abuse:</p> <pre><code>X-RateLimit-Limit: 100\nX-RateLimit-Remaining: 99\nX-RateLimit-Reset: 1678987789\n</code></pre> <p>When rate limit is exceeded, the API returns status code 429 with an error response:</p> <pre><code>{\n  \"success\": false,\n  \"error\": \"Rate limit exceeded\",\n  \"code\": \"RATE_LIMITED\",\n  \"retry_after\": 60\n}\n</code></pre>"},{"location":"api/internal/#api-implementation","title":"API Implementation","text":"<p>The API is implemented in Flask routes, typically organized in the main <code>app.py</code> file or in modular blueprint files:</p> <pre><code>@app.route('/api/documents', methods=['GET'])\n@login_required\ndef get_documents():\n    \"\"\"API endpoint to list documents\"\"\"\n    user_id = session.get('user_id')\n    folder = request.args.get('folder')\n    language = request.args.get('language')\n    status = request.args.get('status')\n\n    try:\n        # Query documents based on filters\n        documents = get_user_documents(user_id, folder, language, status)\n\n        # Return success response\n        return jsonify({\n            \"success\": True,\n            \"data\": {\n                \"documents\": documents\n            }\n        })\n    except Exception as e:\n        # Log error\n        logger.error(f\"Error fetching documents: {e}\")\n\n        # Return error response\n        return jsonify({\n            \"success\": False,\n            \"error\": \"Failed to retrieve documents\",\n            \"code\": \"SERVER_ERROR\"\n        }), 500\n</code></pre>"},{"location":"api/internal/#using-the-api-in-frontend","title":"Using the API in Frontend","text":"<p>Example of using the API from frontend JavaScript:</p> <pre><code>// Fetch document list\nasync function getDocuments(folder = null) {\n    try {\n        let url = '/api/documents';\n        if (folder) {\n            url += `?folder=${encodeURIComponent(folder)}`;\n        }\n\n        const response = await fetch(url, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json'\n            },\n            credentials: 'same-origin'\n        });\n\n        const result = await response.json();\n\n        if (!result.success) {\n            throw new Error(result.error || 'Unknown error');\n        }\n\n        return result.data.documents;\n    } catch (error) {\n        console.error('Error fetching documents:', error);\n        showErrorMessage('Failed to load documents');\n        return [];\n    }\n}\n\n// Update page translation\nasync function saveTranslation(documentId, pageNumber, translatedText) {\n    try {\n        const response = await fetch(`/api/documents/${documentId}/pages/${pageNumber}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            credentials: 'same-origin',\n            body: JSON.stringify({\n                translated_text: translatedText,\n                status: 'translated'\n            })\n        });\n\n        const result = await response.json();\n\n        if (!result.success) {\n            throw new Error(result.error || 'Unknown error');\n        }\n\n        showSuccessMessage('Translation saved successfully');\n        return true;\n    } catch (error) {\n        console.error('Error saving translation:', error);\n        showErrorMessage('Failed to save translation');\n        return false;\n    }\n}\n</code></pre>"},{"location":"api/openai/","title":"OpenAI Integration","text":"<p>BookTranslationPro uses OpenAI's API for AI-assisted translation review and quality improvement.</p>"},{"location":"api/openai/#overview","title":"Overview","text":"<p>The OpenAI integration enables:</p> <ol> <li>AI-assisted review of translated content</li> <li>Consistency checking across translations</li> <li>Terminology validation against glossaries</li> <li>Style and tone suggestions for literary translations</li> </ol>"},{"location":"api/openai/#api-configuration","title":"API Configuration","text":""},{"location":"api/openai/#required-environment-variables","title":"Required Environment Variables","text":"<pre><code>OPENAI_API_KEY=your_openai_api_key\n</code></pre>"},{"location":"api/openai/#openai-assistant-configuration","title":"OpenAI Assistant Configuration","text":"<p>The application uses OpenAI's Assistants API to create specialized translation reviewers:</p> <pre><code>def create_assistant(user_id, name, instructions, author=None, genre=None):\n    \"\"\"\n    Creates an OpenAI assistant configured for translation review\n\n    Args:\n        user_id (str): User ID who owns this assistant\n        name (str): Name of the assistant\n        instructions (str): Instructions for the assistant\n        author (str, optional): Author style to emulate\n        genre (str, optional): Genre of content being translated\n\n    Returns:\n        str: Assistant ID from OpenAI\n    \"\"\"\n    client = OpenAI()\n\n    # Construct full instructions with translation-specific guidance\n    full_instructions = f\"\"\"\n    You are a translation reviewer specialized in {genre or 'general'} content.\n    {f'Please review translations in the style of {author}.' if author else ''}\n\n    {instructions}\n\n    When reviewing translations:\n    1. Check for accuracy against the source text\n    2. Verify terminology consistency\n    3. Evaluate stylistic appropriateness\n    4. Suggest improvements where needed\n    \"\"\"\n\n    # Create the assistant via OpenAI API\n    assistant = client.beta.assistants.create(\n        name=name,\n        instructions=full_instructions,\n        model=\"gpt-4-turbo-preview\",\n    )\n\n    # Store assistant information in database\n    assistant_id = assistant.id\n    # [Database operations here]\n\n    return assistant_id\n</code></pre>"},{"location":"api/openai/#review-process-implementation","title":"Review Process Implementation","text":"<p>The review process follows these steps:</p> <ol> <li>User requests a review of a translated page</li> <li>System retrieves original and translated text</li> <li>Creates a thread with the OpenAI Assistant</li> <li>Sends the content for review with appropriate instructions</li> <li>Processes and displays the feedback to the user</li> </ol> <pre><code>def review_translation(page_id, user_id):\n    \"\"\"\n    Reviews a translation using OpenAI assistant\n\n    Args:\n        page_id (str): ID of the page to review\n        user_id (str): User ID requesting the review\n\n    Returns:\n        dict: Review results with suggestions and score\n    \"\"\"\n    # Get page content and assistant configuration\n    page = get_page_by_id(page_id)\n    assistant_config = get_user_assistant(user_id)\n\n    # Create thread and run review\n    client = OpenAI()\n    thread = client.beta.threads.create()\n\n    # Add messages to thread\n    client.beta.threads.messages.create(\n        thread_id=thread.id,\n        role=\"user\",\n        content=f\"\"\"\n        Please review this translation:\n\n        Source text (original):\n        {page['source_text']}\n\n        Translated text:\n        {page['translated_text']}\n\n        Focus on accuracy, style, and terminology.\n        \"\"\"\n    )\n\n    # Run the assistant\n    run = client.beta.threads.runs.create(\n        thread_id=thread.id,\n        assistant_id=assistant_config.assistant_id,\n    )\n\n    # Wait for completion and get results\n    run = wait_for_run_completion(client, thread.id, run.id)\n    messages = client.beta.threads.messages.list(thread_id=thread.id)\n\n    # Process and return results\n    return process_review_results(messages.data)\n</code></pre>"},{"location":"api/openai/#error-handling","title":"Error Handling","text":"<p>The OpenAI integration includes robust error handling:</p> <pre><code>def send_to_openai_with_retry(func, *args, max_retries=3, **kwargs):\n    \"\"\"\n    Execute an OpenAI API call with retry logic\n\n    Args:\n        func: The OpenAI API function to call\n        max_retries: Maximum number of retry attempts\n\n    Returns:\n        Response from the API call\n    \"\"\"\n    retry_count = 0\n    while retry_count &lt; max_retries:\n        try:\n            return func(*args, **kwargs)\n        except RateLimitError:\n            retry_count += 1\n            sleep_time = 2 ** retry_count  # Exponential backoff\n            time.sleep(sleep_time)\n        except APIError as e:\n            if e.http_status == 500:\n                retry_count += 1\n                time.sleep(1)\n            else:\n                raise\n\n    # If we've exhausted retries\n    raise Exception(f\"Failed after {max_retries} retries\")\n</code></pre>"},{"location":"api/openai/#api-limits-and-performance","title":"API Limits and Performance","text":"<p>To prevent excessive API usage and costs:</p> <ol> <li>Reviews are rate-limited per user</li> <li>Cached responses are used for similar content</li> <li>Batch processing is used for multi-page reviews</li> <li>Results are stored in the database to avoid redundant calls</li> </ol>"},{"location":"api/openai/#response-processing","title":"Response Processing","text":"<p>The system processes OpenAI's responses to extract actionable feedback:</p> <pre><code>def process_review_results(messages):\n    \"\"\"\n    Process OpenAI assistant messages into structured feedback\n\n    Args:\n        messages: List of messages from the assistant\n\n    Returns:\n        dict: Structured review data\n    \"\"\"\n    # Extract assistant's response (last message from assistant)\n    assistant_messages = [m for m in messages if m.role == \"assistant\"]\n    if not assistant_messages:\n        return {\"error\": \"No response from assistant\"}\n\n    review_text = assistant_messages[-1].content[0].text.value\n\n    # Parse the review into categories\n    review_data = {\n        \"accuracy\": extract_category(review_text, \"Accuracy\"),\n        \"style\": extract_category(review_text, \"Style\"),\n        \"terminology\": extract_category(review_text, \"Terminology\"),\n        \"suggestions\": extract_suggestions(review_text),\n        \"overall_score\": extract_score(review_text)\n    }\n\n    return review_data\n</code></pre>"},{"location":"api/openai/#related-components","title":"Related Components","text":"<ul> <li>Translation Module: Provides context and source/target text for review</li> <li>User Interface: Displays review results and suggestions</li> <li>Assistant Configuration: Allows customization of review parameters</li> </ul>"},{"location":"architecture/overview/","title":"Architecture Overview","text":""},{"location":"architecture/overview/#system-architecture","title":"System Architecture","text":"<p>BookTranslationPro follows a classic web application architecture with some specific components to handle document processing and AI integrations:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Frontend    \u2502      \u2502    Backend    \u2502      \u2502   Database    \u2502\n\u2502  (Templates,  \u2502\u25c4\u2500\u2500\u2500\u2500\u25ba\u2502  (Flask App)  \u2502\u25c4\u2500\u2500\u2500\u2500\u25ba\u2502  (Supabase)   \u2502\n\u2502   Bootstrap)  \u2502      \u2502               \u2502      \u2502               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                               \u2502\n                               \u25bc\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502                     \u2502                     \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Document     \u2502    \u2502  Translation    \u2502    \u2502  External     \u2502\n\u2502  Processing   \u2502    \u2502  Engine         \u2502    \u2502  APIs         \u2502\n\u2502  Pipeline     \u2502    \u2502                 \u2502    \u2502  (DeepL,      \u2502\n\u2502               \u2502    \u2502                 \u2502    \u2502   OpenAI)     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/overview/#core-components","title":"Core Components","text":""},{"location":"architecture/overview/#web-layer-flask-application","title":"Web Layer (Flask Application)","text":"<p>The Flask application handles HTTP requests, session management, and serves web pages. It's organized into routes that correspond to different functionalities:</p> <ul> <li>Authentication routes</li> <li>Document management routes</li> <li>Translation workspace routes</li> <li>Administration routes</li> <li>API endpoints</li> </ul>"},{"location":"architecture/overview/#persistence-layer-supabase","title":"Persistence Layer (Supabase)","text":"<p>Supabase provides both database and authentication services:</p> <ul> <li>PostgreSQL database for storing all application data</li> <li>Authentication services for user management</li> <li>Storage capabilities for document files and exports</li> </ul>"},{"location":"architecture/overview/#document-processing-pipeline","title":"Document Processing Pipeline","text":"<p>Responsible for: - Extracting text from various file formats (PDF, DOCX, TXT, etc.) - Segmenting text into pages for translation - Creating document versions and tracking changes</p>"},{"location":"architecture/overview/#translation-engine","title":"Translation Engine","text":"<p>Handles the core translation functionality: - Integration with DeepL API for machine translation - Translation memory management - Glossary application - AI review process via OpenAI</p>"},{"location":"architecture/overview/#data-flow","title":"Data Flow","text":"<ol> <li>Document Upload Flow:</li> <li> <p>User uploads document \u2192 Document processing extracts text \u2192 Text is segmented \u2192 Machine translation is applied \u2192 Document is ready for human translation</p> </li> <li> <p>Translation Workflow:</p> </li> <li> <p>User selects document \u2192 Loads translation workspace \u2192 Edits translations \u2192 Saves progress \u2192 System tracks changes and versions</p> </li> <li> <p>Export Flow:</p> </li> <li>User selects export format \u2192 System retrieves translated content \u2192 Formats according to export requirements \u2192 Generates downloadable file</li> </ol>"},{"location":"architecture/overview/#design-principles","title":"Design Principles","text":"<p>The architecture follows these key principles:</p> <ol> <li>Separation of Concerns: Clear boundaries between document processing, translation, and web presentation</li> <li>Fail-safe Operations: Graceful handling of API failures with retry mechanisms</li> <li>Caching for Performance: Translation memory and caching to reduce API calls</li> <li>Progressive Enhancement: Core functionality works without JavaScript, but enhanced with JS</li> <li>Security First: Authentication required for all sensitive operations, API keys secured</li> </ol>"},{"location":"architecture/system-design/","title":"System Design","text":"<p>This document outlines the system architecture and design of BookTranslationPro, explaining how components interact and how the application is structured.</p>"},{"location":"architecture/system-design/#system-architecture-diagram","title":"System Architecture Diagram","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                           Client Layer                               \u2502\n\u2502                                                                      \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502 Web Browser \u2502  \u2502  Translation \u2502  \u2502   Document  \u2502  \u2502  Settings   \u2502 \u2502\n\u2502  \u2502  Interface  \u2502  \u2502  Workspace   \u2502  \u2502 Management  \u2502  \u2502 &amp; Profile   \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                               \u2502\n                               \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                           Application Layer                          \u2502\n\u2502                                                                      \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502    Auth     \u2502  \u2502  Document    \u2502  \u2502 Translation \u2502  \u2502   Export    \u2502 \u2502\n\u2502  \u2502   Module    \u2502  \u2502  Processing  \u2502  \u2502   Engine    \u2502  \u2502   Engine    \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502                                                                      \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502  Glossary   \u2502  \u2502 Translation  \u2502  \u2502 Version     \u2502  \u2502  Analytics  \u2502 \u2502\n\u2502  \u2502  Manager    \u2502  \u2502   Memory     \u2502  \u2502 Control     \u2502  \u2502   Module    \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                               \u2502\n                               \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                          Integration Layer                           \u2502\n\u2502                                                                      \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502  Supabase   \u2502  \u2502    DeepL    \u2502  \u2502   OpenAI    \u2502  \u2502   PostHog   \u2502 \u2502\n\u2502  \u2502  Client     \u2502  \u2502     API     \u2502  \u2502     API     \u2502  \u2502     API     \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                               \u2502\n                               \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                           Storage Layer                              \u2502\n\u2502                                                                      \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502    PostgreSQL Database  \u2502        \u2502      File Storage           \u2502 \u2502\n\u2502  \u2502    (Supabase)           \u2502        \u2502      (Supabase Storage)     \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/system-design/#layer-descriptions","title":"Layer Descriptions","text":""},{"location":"architecture/system-design/#1-client-layer","title":"1. Client Layer","text":"<p>The client layer consists of browser-based interfaces that interact with the Flask backend:</p> <ul> <li>Web Browser Interface: General navigation and user interface</li> <li>Translation Workspace: Interactive interface for editing translations</li> <li>Document Management: Upload, organization, and version control of documents</li> <li>Settings &amp; Profile: User profile, API settings, and preferences</li> </ul> <p>This layer is built with: - HTML templates with Jinja2 templating - Bootstrap 5 for responsive layouts - JavaScript for interactive features - CSS for custom styling</p>"},{"location":"architecture/system-design/#2-application-layer","title":"2. Application Layer","text":"<p>The application layer contains the core business logic implemented as Flask routes and Python modules:</p> <ul> <li>Auth Module: User authentication, authorization, and session management</li> <li>Document Processing: Text extraction, segmentation, and format handling</li> <li>Translation Engine: Core translation functionality with memory and AI capabilities</li> <li>Export Engine: Document format conversion and download generation</li> <li>Glossary Manager: Terminology management and application</li> <li>Translation Memory: Storage and retrieval of previous translations</li> <li>Version Control: Document and page version tracking</li> <li>Analytics Module: Usage tracking and reporting</li> </ul> <p>This layer is built with: - Flask web framework for routing and request handling - Python business logic organized by module - SQLAlchemy for ORM (limited usage) - Custom utilities for specialized processing</p>"},{"location":"architecture/system-design/#3-integration-layer","title":"3. Integration Layer","text":"<p>The integration layer connects the application to external services:</p> <ul> <li>Supabase Client: Authentication and database operations</li> <li>DeepL API: Machine translation services</li> <li>OpenAI API: AI-assisted translation review</li> <li>PostHog API: User analytics and tracking</li> </ul> <p>This layer is built with: - API client libraries for each service - Abstraction layers to handle API-specific details - Retry mechanisms and error handling - Rate limiting and quota management</p>"},{"location":"architecture/system-design/#4-storage-layer","title":"4. Storage Layer","text":"<p>The storage layer manages data persistence:</p> <ul> <li>PostgreSQL Database: Relational database (via Supabase)</li> <li>File Storage: Document storage and exports (via Supabase Storage)</li> </ul>"},{"location":"architecture/system-design/#request-flow","title":"Request Flow","text":"<p>To illustrate how the system works, here's a typical request flow for document translation:</p> <pre><code>1. User uploads document in Web UI\n   \u2502\n2. Document Processing module extracts text\n   \u2502\n3. Text is segmented into pages and stored in database\n   \u2502\n4. DeepL API is called to provide initial translation\n   \u2502\n5. User edits translations in Translation Workspace\n   \u2502\n6. Changes are saved to database\n   \u2502\n7. Translation Memory is updated\n   \u2502\n8. User requests AI review\n   \u2502\n9. OpenAI API is called to review translation\n   \u2502\n10. User exports document\n    \u2502\n11. Export Engine generates document in selected format\n</code></pre>"},{"location":"architecture/system-design/#stateless-architecture","title":"Stateless Architecture","text":"<p>BookTranslationPro is designed as a primarily stateless application:</p> <ul> <li>User state is maintained through Flask sessions</li> <li>Document state is stored in the database</li> <li>Workflow state is stored in the database</li> <li>API connections are stateless and created per request</li> </ul> <p>This architecture allows for future horizontal scaling, as application servers can be added without shared state requirements.</p>"},{"location":"architecture/system-design/#data-flow","title":"Data Flow","text":""},{"location":"architecture/system-design/#document-upload-flow","title":"Document Upload Flow","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Browser \u2502     \u2502   Flask   \u2502     \u2502 Document  \u2502     \u2502  Supabase \u2502\n\u2502           \u2502     \u2502   App     \u2502     \u2502 Processing\u2502     \u2502           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518\n      \u2502                 \u2502                 \u2502                 \u2502\n      \u2502 Upload File     \u2502                 \u2502                 \u2502\n      \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2502                 \u2502                 \u2502\n      \u2502                 \u2502                 \u2502                 \u2502\n      \u2502                 \u2502 Process File    \u2502                 \u2502\n      \u2502                 \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2502                 \u2502\n      \u2502                 \u2502                 \u2502                 \u2502\n      \u2502                 \u2502                 \u2502 Extract Text    \u2502\n      \u2502                 \u2502                 \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2502\n      \u2502                 \u2502                 \u2502                 \u2502\n      \u2502                 \u2502                 \u2502 Store Document  \u2502\n      \u2502                 \u2502                 \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2502\n      \u2502                 \u2502                 \u2502                 \u2502\n      \u2502                 \u2502 Document ID     \u2502                 \u2502\n      \u2502                 \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502                 \u2502\n      \u2502                 \u2502                 \u2502                 \u2502\n      \u2502 Redirect to     \u2502                 \u2502                 \u2502\n      \u2502 Document View   \u2502                 \u2502                 \u2502\n      \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502                 \u2502                 \u2502\n      \u2502                 \u2502                 \u2502                 \u2502\n</code></pre>"},{"location":"architecture/system-design/#translation-flow","title":"Translation Flow","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Browser \u2502     \u2502   Flask   \u2502     \u2502 Translation\u2502     \u2502  DeepL    \u2502\n\u2502           \u2502     \u2502   App     \u2502     \u2502   Engine   \u2502     \u2502   API     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518\n      \u2502                 \u2502                 \u2502                 \u2502\n      \u2502 Request         \u2502                 \u2502                 \u2502\n      \u2502 Translation     \u2502                 \u2502                 \u2502\n      \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2502                 \u2502                 \u2502\n      \u2502                 \u2502                 \u2502                 \u2502\n      \u2502                 \u2502 Translate Doc   \u2502                 \u2502\n      \u2502                 \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2502                 \u2502\n      \u2502                 \u2502                 \u2502                 \u2502\n      \u2502                 \u2502                 \u2502 Check TM Cache  \u2502\n      \u2502                 \u2502                 \u2502\u2500\u2500\u2500\u2500\u2500\u2510          \u2502\n      \u2502                 \u2502                 \u2502     \u2502          \u2502\n      \u2502                 \u2502                 \u2502\u25c4\u2500\u2500\u2500\u2500\u2518          \u2502\n      \u2502                 \u2502                 \u2502                \u2502\n      \u2502                 \u2502                 \u2502 API Request    \u2502\n      \u2502                 \u2502                 \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2502\n      \u2502                 \u2502                 \u2502                \u2502\n      \u2502                 \u2502                 \u2502 API Response   \u2502\n      \u2502                 \u2502                 \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502\n      \u2502                 \u2502                 \u2502                \u2502\n      \u2502                 \u2502                 \u2502 Update TM Cache\u2502\n      \u2502                 \u2502                 \u2502\u2500\u2500\u2500\u2500\u2500\u2510          \u2502\n      \u2502                 \u2502                 \u2502     \u2502          \u2502\n      \u2502                 \u2502                 \u2502\u25c4\u2500\u2500\u2500\u2500\u2518          \u2502\n      \u2502                 \u2502                 \u2502                \u2502\n      \u2502                 \u2502 Translated Doc  \u2502                \u2502\n      \u2502                 \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502                \u2502\n      \u2502                 \u2502                 \u2502                \u2502\n      \u2502 View Translation\u2502                 \u2502                \u2502\n      \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502                 \u2502                \u2502\n      \u2502                 \u2502                 \u2502                \u2502\n</code></pre>"},{"location":"architecture/system-design/#key-design-patterns","title":"Key Design Patterns","text":"<p>BookTranslationPro implements several design patterns:</p>"},{"location":"architecture/system-design/#repository-pattern","title":"Repository Pattern","text":"<p>Database access is abstracted into repository-like functions:</p> <pre><code># Example repository pattern\ndef get_document_by_id(document_id):\n    \"\"\"Retrieves document by ID\"\"\"\n    return supabase.table(\"documents\").select(\"*\").eq(\"id\", document_id).single().execute().data\n\ndef update_document_status(document_id, status):\n    \"\"\"Updates document status\"\"\"\n    return supabase.table(\"documents\").update({\"status\": status}).eq(\"id\", document_id).execute()\n</code></pre>"},{"location":"architecture/system-design/#strategy-pattern","title":"Strategy Pattern","text":"<p>Various strategies are used for text extraction based on file type:</p> <pre><code># Strategy pattern for text extraction\nextractors = {\n    'pdf': extract_text_from_pdf,\n    'docx': extract_text_from_docx,\n    'txt': extract_text_from_txt,\n    # more strategies...\n}\n\ndef extract_text(file_path, file_type):\n    \"\"\"Extracts text using appropriate strategy\"\"\"\n    extractor = extractors.get(file_type)\n    if not extractor:\n        raise UnsupportedFormatError(f\"No extractor for {file_type}\")\n    return extractor(file_path)\n</code></pre>"},{"location":"architecture/system-design/#decorator-pattern","title":"Decorator Pattern","text":"<p>Authentication and logging are implemented using decorators:</p> <pre><code># Decorator pattern for authentication\n@login_required\ndef protected_route():\n    # Only accessible when logged in\n    return \"Protected content\"\n\n# Decorator pattern for logging\n@log_function_call\ndef important_function():\n    # Function call will be logged\n    return perform_operation()\n</code></pre>"},{"location":"architecture/system-design/#factory-method-pattern","title":"Factory Method Pattern","text":"<p>Creating document exporters based on format type:</p> <pre><code># Factory method for exporters\ndef create_exporter(format_type):\n    \"\"\"Creates appropriate exporter based on format\"\"\"\n    if format_type == 'pdf':\n        return PDFExporter()\n    elif format_type == 'docx':\n        return DocxExporter()\n    elif format_type == 'txt':\n        return TextExporter()\n    else:\n        raise ValueError(f\"Unsupported format: {format_type}\")\n</code></pre>"},{"location":"architecture/system-design/#scalability-considerations","title":"Scalability Considerations","text":"<p>The application is designed with potential scaling in mind:</p> <ol> <li>Database Scaling:</li> <li>Implemented through Supabase (PostgreSQL)</li> <li>Indexing for common queries</li> <li> <p>Connection pooling for efficiency</p> </li> <li> <p>Stateless Design:</p> </li> <li>Application servers can be added horizontally</li> <li> <p>No shared memory requirements between instances</p> </li> <li> <p>Background Processing:</p> </li> <li>Long-running tasks (like translation of large documents) can be moved to background workers</li> <li> <p>Progress tracking implementation for user feedback</p> </li> <li> <p>Caching Strategy:</p> </li> <li>Translation memory to reduce API calls</li> <li>Document caching for frequently accessed content</li> </ol>"},{"location":"architecture/system-design/#security-architecture","title":"Security Architecture","text":"<p>Security measures implemented within the architecture:</p> <ol> <li>Authentication:</li> <li>Session-based authentication via Supabase</li> <li>Role-based access control</li> <li> <p>CSRF protection for forms</p> </li> <li> <p>Data Protection:</p> </li> <li>API keys stored in environment variables</li> <li>Sensitive operations require authentication</li> <li> <p>Database access through parameterized queries</p> </li> <li> <p>External API Security:</p> </li> <li>Rate limiting for API calls</li> <li>Quota monitoring and alerts</li> <li> <p>Secure storage of API credentials</p> </li> <li> <p>Input Validation:</p> </li> <li>Form validation on both client and server</li> <li>File type verification</li> <li>Size limitations for uploads</li> </ol>"},{"location":"architecture/tech-stack/","title":"Tech Stack","text":"<p>BookTranslationPro is built on a modern technology stack designed for scalability, maintainability, and developer productivity. This document outlines the core technologies used in the application.</p>"},{"location":"architecture/tech-stack/#overview","title":"Overview","text":"<p>The application uses a Python-based backend with Flask, PostgreSQL database via Supabase, and a server-rendered frontend with modern JavaScript enhancements.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    Frontend      \u2502 \u2502     Backend      \u2502 \u2502     Storage      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 HTML/CSS/JS      \u2502 \u2502 Python 3.9+      \u2502 \u2502 PostgreSQL       \u2502\n\u2502 Bootstrap 5      \u2502 \u2502 Flask            \u2502 \u2502 Supabase Storage \u2502\n\u2502 jQuery           \u2502 \u2502 Supabase Client  \u2502 \u2502 File System      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/tech-stack/#backend-technologies","title":"Backend Technologies","text":""},{"location":"architecture/tech-stack/#core-framework","title":"Core Framework","text":"<ul> <li>Python 3.9+: Modern Python version with type hints support</li> <li>Flask: Lightweight WSGI web application framework</li> <li>Gunicorn: WSGI HTTP Server for production deployment</li> </ul>"},{"location":"architecture/tech-stack/#database-authentication","title":"Database &amp; Authentication","text":"<ul> <li>Supabase: Backend-as-a-Service platform providing:</li> <li>PostgreSQL database</li> <li>Authentication services</li> <li>Storage capabilities</li> <li>PostgreSQL: Relational database for structured data storage</li> </ul>"},{"location":"architecture/tech-stack/#document-processing","title":"Document Processing","text":"<ul> <li>PyPDF2/pdfplumber: PDF text extraction libraries</li> <li>python-docx: Word document processing</li> <li>textract: Text extraction from various file formats</li> <li>striprtf: Rich Text Format processing</li> <li>odfpy: OpenDocument Format processing</li> </ul>"},{"location":"architecture/tech-stack/#translation-ai","title":"Translation &amp; AI","text":"<ul> <li>DeepL API Client: Machine translation integration</li> <li>OpenAI API Client: AI-assisted translation review</li> <li>fuzzy-wuzzy: Fuzzy string matching for translation memory</li> </ul>"},{"location":"architecture/tech-stack/#export-document-generation","title":"Export &amp; Document Generation","text":"<ul> <li>python-docx: Word document generation</li> <li>weasyprint: HTML to PDF conversion</li> <li>jinja2: Templating for HTML exports</li> </ul>"},{"location":"architecture/tech-stack/#security-validation","title":"Security &amp; Validation","text":"<ul> <li>Flask-WTF: Form validation and CSRF protection</li> <li>python-dotenv: Environment variable management</li> <li>bleach: HTML sanitization</li> </ul>"},{"location":"architecture/tech-stack/#monitoring-analytics","title":"Monitoring &amp; Analytics","text":"<ul> <li>PostHog: User analytics</li> <li>Logging: Standard library logging with custom formatters</li> </ul>"},{"location":"architecture/tech-stack/#frontend-technologies","title":"Frontend Technologies","text":""},{"location":"architecture/tech-stack/#ui-framework","title":"UI Framework","text":"<ul> <li>Bootstrap 5: Responsive CSS framework</li> <li>Flask Templates (Jinja2): Server-side rendering</li> <li>Custom CSS: Application-specific styling</li> </ul>"},{"location":"architecture/tech-stack/#javascript-libraries","title":"JavaScript Libraries","text":"<ul> <li>jQuery: DOM manipulation and AJAX requests</li> <li>Summernote: Rich text editor for translation workspace</li> <li>mark.js: Text highlighting for search and glossary terms</li> <li>SortableJS: Drag-and-drop reordering</li> </ul>"},{"location":"architecture/tech-stack/#asset-management","title":"Asset Management","text":"<ul> <li>Flask Static Files: Static file serving</li> <li>SVG Icons: Vector icons for UI elements</li> </ul>"},{"location":"architecture/tech-stack/#devops-infrastructure","title":"DevOps &amp; Infrastructure","text":""},{"location":"architecture/tech-stack/#development-tools","title":"Development Tools","text":"<ul> <li>pip: Python package manager</li> <li>pytest: Testing framework</li> <li>flake8: Linting</li> <li>black: Code formatting</li> </ul>"},{"location":"architecture/tech-stack/#deployment","title":"Deployment","text":"<ul> <li>Gunicorn: Production WSGI server</li> <li>dotenv: Environment configuration</li> <li>Docker (optional): Containerization for deployment</li> </ul>"},{"location":"architecture/tech-stack/#version-control","title":"Version Control","text":"<ul> <li>Git: Source code version control</li> </ul>"},{"location":"architecture/tech-stack/#external-services","title":"External Services","text":""},{"location":"architecture/tech-stack/#translation-services","title":"Translation Services","text":"<ul> <li>DeepL API: Machine translation provider</li> <li>Features: High-quality translation, glossary support</li> <li>Pricing: Based on character count</li> <li>Documentation: DeepL API Documentation</li> </ul>"},{"location":"architecture/tech-stack/#ai-services","title":"AI Services","text":"<ul> <li>OpenAI API: AI-powered translation review</li> <li>Features: Contextual understanding, quality assessment</li> <li>Models: GPT-4, Assistant API</li> <li>Documentation: OpenAI API Documentation</li> </ul>"},{"location":"architecture/tech-stack/#analytics","title":"Analytics","text":"<ul> <li>PostHog: User behavior tracking</li> <li>Features: Event tracking, funnels, retention</li> <li>Documentation: PostHog Documentation</li> </ul>"},{"location":"architecture/tech-stack/#database-auth","title":"Database &amp; Auth","text":"<ul> <li>Supabase: Backend-as-a-Service</li> <li>Features: PostgreSQL, Auth, Storage</li> <li>Documentation: Supabase Documentation</li> </ul>"},{"location":"architecture/tech-stack/#dependencies-management","title":"Dependencies Management","text":"<p>Dependencies are managed through <code>requirements.txt</code> with pinned versions:</p> <pre><code># Web Framework\nflask==2.2.3\nWerkzeug==2.2.3\ngunicorn==20.1.0\npython-dotenv==1.0.0\n\n# Supabase\nsupabase==1.0.3\npostgrest==0.10.6\n\n# Document Processing\nPyPDF2==3.0.1\npdfplumber==0.9.0\npython-docx==0.8.11\ntextract==1.6.5\nstriprtf==0.0.22\nodfpy==1.4.1\n\n# Translation &amp; AI\nopenai==0.27.8\ndeepl==1.14.0\nfuzzywuzzy==0.18.0\npython-Levenshtein==0.21.1\n\n# Export\nweasyprint==59.0\nmarkdown==3.4.3\n\n# Security &amp; Validation\nFlask-WTF==1.1.1\nbleach==6.0.0\nemail-validator==2.0.0\n\n# Utilities\npython-slugify==8.0.1\nposthog==2.4.0\n</code></pre>"},{"location":"architecture/tech-stack/#development-environment","title":"Development Environment","text":""},{"location":"architecture/tech-stack/#recommended-setup","title":"Recommended Setup","text":"<ul> <li>IDE: VS Code with Python extension</li> <li>Python Environment: Virtual environment (venv)</li> <li>Database: Local Supabase or PostgreSQL instance</li> <li>Environment Variables: Local .env file</li> </ul>"},{"location":"architecture/tech-stack/#environment-configuration","title":"Environment Configuration","text":"<p>Example <code>.env</code> file for development:</p> <pre><code># Flask\nFLASK_APP=app.py\nFLASK_DEBUG=1\nSECRET_KEY=dev-secret-key-change-in-production\n\n# Supabase\nSUPABASE_URL=https://your-project.supabase.co\nSUPABASE_KEY=your-supabase-anon-key\nSUPABASE_SERVICE_KEY=your-supabase-service-key\n\n# API Keys\nDEEPL_API_KEY=your-deepl-api-key\nOPENAI_API_KEY=your-openai-api-key\nPOSTHOG_API_KEY=your-posthog-api-key\n</code></pre>"},{"location":"architecture/tech-stack/#performance-considerations","title":"Performance Considerations","text":"<p>The tech stack is optimized for performance in several ways:</p> <ol> <li>Supabase PostgreSQL: Efficient database queries with proper indexing</li> <li>Translation Memory: Reduces expensive API calls by caching translations</li> <li>Static File Serving: CSS/JS assets are minified and cached</li> <li>Lazy Loading: Document pages are loaded on-demand as needed</li> <li>Connection Pooling: Database connections are pooled for efficiency</li> </ol>"},{"location":"architecture/tech-stack/#security-considerations","title":"Security Considerations","text":"<p>Security measures implemented in the tech stack:</p> <ol> <li>Authentication: Supabase Auth with session management</li> <li>CSRF Protection: Flask-WTF for form protection</li> <li>Input Sanitization: Bleach for HTML sanitization</li> <li>Parameterized Queries: All database queries use parameterization</li> <li>Environment Variables: Sensitive credentials stored in environment variables</li> <li>Content Security Policy: Restrictive CSP headers in production</li> </ol>"},{"location":"architecture/tech-stack/#internationalization","title":"Internationalization","text":"<p>The application supports multiple languages through:</p> <ol> <li>DeepL API: Support for numerous language pairs</li> <li>Unicode Handling: Proper UTF-8 encoding throughout</li> <li>Locale-Aware Processing: Date and number formatting based on locale</li> </ol>"},{"location":"architecture/tech-stack/#monitoring-logging","title":"Monitoring &amp; Logging","text":"<p>The tech stack includes comprehensive monitoring capabilities:</p> <ol> <li>Structured Logging: JSON-formatted logs with severity levels</li> <li>PostHog Events: User actions tracked as events</li> <li>Error Tracking: Detailed error reporting with context</li> <li>API Usage Monitoring: Tracking of external API consumption</li> </ol>"},{"location":"database/schema/","title":"Database Schema","text":"<p>BookTranslationPro uses PostgreSQL via Supabase as its primary database. This document outlines the database schema and relationships between tables.</p>"},{"location":"database/schema/#schema-diagram","title":"Schema Diagram","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   users     \u2502       \u2502 documents  \u2502       \u2502 document_pages  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 id          \u2502\u25c4\u2500\u2500\u2510   \u2502 id         \u2502\u25c4\u2500\u2510    \u2502 id              \u2502\n\u2502 email       \u2502   \u2514\u2500\u2500\u2500\u2524 user_id    \u2502  \u2514\u2500\u2500\u2500\u2500\u2524 document_id     \u2502\n\u2502 created_at  \u2502       \u2502 title      \u2502       \u2502 page_number     \u2502\n\u2502 updated_at  \u2502       \u2502 folder     \u2502       \u2502 source_text     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502 language   \u2502       \u2502 translated_text \u2502\n                      \u2502 status     \u2502       \u2502 status          \u2502\n                      \u2502 created_at \u2502       \u2502 created_at      \u2502\n                      \u2502 updated_at \u2502       \u2502 updated_at      \u2502\n                      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u25b2                      \u25b2\n                             \u2502                      \u2502\n                      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                      \u2502 doc_versions \u2502     \u2502 page_versions  \u2502\n                      \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524     \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n                      \u2502 id           \u2502     \u2502 id             \u2502\n                      \u2502 document_id  \u2502     \u2502 page_id        \u2502\n                      \u2502 version      \u2502     \u2502 version        \u2502\n                      \u2502 created_at   \u2502     \u2502 source_text    \u2502\n                      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502 translated_text\u2502\n                                           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  glossaries \u2502       \u2502glossary_   \u2502       \u2502  translation    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524       \u2502entries     \u2502       \u2502  memory         \u2502\n\u2502 id          \u2502\u25c4\u2500\u2500\u2510   \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 user_id     \u2502   \u2514\u2500\u2500\u2500\u2524 glossary_id\u2502       \u2502 id              \u2502\n\u2502 name        \u2502       \u2502 source_term\u2502       \u2502 user_id         \u2502\n\u2502 source_lang \u2502       \u2502 target_term\u2502       \u2502 source_text     \u2502\n\u2502 target_lang \u2502       \u2502 created_at \u2502       \u2502 translated_text \u2502\n\u2502 created_at  \u2502       \u2502            \u2502       \u2502 source_lang     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502 target_lang     \u2502\n                                           \u2502 created_at      \u2502\n                                           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 assistants  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 id          \u2502\n\u2502 user_id     \u2502\n\u2502 name        \u2502\n\u2502 assistant_id\u2502\n\u2502 instructions\u2502\n\u2502 created_at  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"database/schema/#tables","title":"Tables","text":""},{"location":"database/schema/#users","title":"users","text":"<p>Stores user account information.</p> Column Type Description id UUID Primary key email VARCHAR User's email address created_at TIMESTAMP Account creation timestamp updated_at TIMESTAMP Account last updated timestamp"},{"location":"database/schema/#documents","title":"documents","text":"<p>Stores document metadata.</p> Column Type Description id UUID Primary key user_id UUID Reference to users.id title VARCHAR Document title folder VARCHAR Folder/series name language VARCHAR Source language code target_lang VARCHAR Target language code status VARCHAR Document status created_at TIMESTAMP Document creation timestamp updated_at TIMESTAMP Document last updated timestamp"},{"location":"database/schema/#document_pages","title":"document_pages","text":"<p>Stores individual pages of documents.</p> Column Type Description id UUID Primary key document_id UUID Reference to documents.id page_number INTEGER Page number within document source_text TEXT Original text content translated_text TEXT Translated text content status VARCHAR Translation status created_at TIMESTAMP Page creation timestamp updated_at TIMESTAMP Page last updated timestamp"},{"location":"database/schema/#doc_versions","title":"doc_versions","text":"<p>Tracks document versions for change management.</p> Column Type Description id UUID Primary key document_id UUID Reference to documents.id version INTEGER Version number created_at TIMESTAMP Version creation timestamp"},{"location":"database/schema/#page_versions","title":"page_versions","text":"<p>Stores version history of page translations.</p> Column Type Description id UUID Primary key page_id UUID Reference to document_pages.id version INTEGER Version number source_text TEXT Original text at this version translated_text TEXT Translated text at this version created_at TIMESTAMP Version creation timestamp"},{"location":"database/schema/#glossaries","title":"glossaries","text":"<p>Stores glossary metadata.</p> Column Type Description id UUID Primary key user_id UUID Reference to users.id name VARCHAR Glossary name source_lang VARCHAR Source language code target_lang VARCHAR Target language code created_at TIMESTAMP Glossary creation timestamp"},{"location":"database/schema/#glossary_entries","title":"glossary_entries","text":"<p>Stores individual glossary term pairs.</p> Column Type Description id UUID Primary key glossary_id UUID Reference to glossaries.id source_term VARCHAR Term in source language target_term VARCHAR Term in target language created_at TIMESTAMP Entry creation timestamp"},{"location":"database/schema/#translation_memory","title":"translation_memory","text":"<p>Stores previously translated segments.</p> Column Type Description id UUID Primary key user_id UUID Reference to users.id source_text TEXT Original text segment translated_text TEXT Translated text segment source_lang VARCHAR Source language code target_lang VARCHAR Target language code created_at TIMESTAMP Entry creation timestamp"},{"location":"database/schema/#assistants","title":"assistants","text":"<p>Stores OpenAI assistant configurations.</p> Column Type Description id UUID Primary key user_id UUID Reference to users.id name VARCHAR Assistant name assistant_id VARCHAR OpenAI assistant ID instructions TEXT Assistant instructions created_at TIMESTAMP Assistant creation timestamp"},{"location":"database/schema/#relationships","title":"Relationships","text":"<ul> <li>One user can have many documents (1:N)</li> <li>One document can have many pages (1:N)</li> <li>One document can have many versions (1:N)</li> <li>One page can have many versions (1:N)</li> <li>One user can have many glossaries (1:N)</li> <li>One glossary can have many entries (1:N)</li> <li>One user can have many translation memory entries (1:N)</li> <li>One user can have many assistant configurations (1:N)</li> </ul>"},{"location":"database/schema/#indexes","title":"Indexes","text":"<p>The following indexes are recommended for performance:</p> Table Columns Purpose documents user_id, folder Fast lookup of documents by folder document_pages document_id, page_number Fast lookup of pages by number document_pages document_id, status Fast lookup of pages by status doc_versions document_id, version Fast lookup of specific versions page_versions page_id, version Fast lookup of specific page versions translation_memory source_lang, target_lang, user_id Fast lookup of translation memories glossary_entries glossary_id Fast lookup of terms in a glossary"},{"location":"database/schema/#sql-setup","title":"SQL Setup","text":"<p>The table creation scripts are available in <code>setup_tables.sql</code>.</p>"},{"location":"database/supabase/","title":"Supabase","text":"<p>This documentation is under development.</p>"},{"location":"database/supabase/#overview","title":"Overview","text":"<p>This page will document the Supabase database configuration.</p>"},{"location":"database/supabase/#technical-details","title":"Technical Details","text":"<p>This section will include technical details about the supabase.</p>"},{"location":"database/supabase/#related-components","title":"Related Components","text":"<ul> <li>Link to related component 1</li> <li>Link to related component 2</li> </ul>"},{"location":"modules/authentication/","title":"Authentication Module","text":"<p>The authentication module in BookTranslationPro handles user identity management, authorization, and session control using Supabase Auth.</p>"},{"location":"modules/authentication/#architecture","title":"Architecture","text":"<p>The authentication system consists of several components:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                Authentication Module               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 User        \u2502  Session      \u2502  Permission        \u2502\n\u2502 Management  \u2502  Management   \u2502  Control           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Password    \u2502  Email        \u2502  Security          \u2502\n\u2502 Management  \u2502  Verification \u2502  Features          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"modules/authentication/#implementation","title":"Implementation","text":"<p>The authentication module is implemented in <code>auth.py</code> and integrates with Supabase's authentication services.</p>"},{"location":"modules/authentication/#user-management","title":"User Management","text":"<pre><code>def sign_up(email, password, name):\n    \"\"\"\n    Register a new user\n\n    Args:\n        email (str): User's email address\n        password (str): User's password\n        name (str): User's display name\n\n    Returns:\n        dict: User data on success or error message\n    \"\"\"\n    try:\n        # Register user with Supabase\n        result = supabase.auth.sign_up({\n            \"email\": email,\n            \"password\": password\n        })\n\n        # Get the new user ID\n        user_id = result.user.id\n\n        # Store additional user information in the profile table\n        supabase.table(\"profiles\").insert({\n            \"id\": user_id,\n            \"name\": name,\n            \"email\": email,\n            \"created_at\": datetime.now().isoformat()\n        }).execute()\n\n        return {\"success\": True, \"user_id\": user_id}\n\n    except Exception as e:\n        logger.error(f\"Sign-up error: {e}\")\n        return {\"success\": False, \"error\": str(e)}\n</code></pre>"},{"location":"modules/authentication/#session-management","title":"Session Management","text":"<pre><code>def sign_in(email, password):\n    \"\"\"\n    Authenticate a user and create a session\n\n    Args:\n        email (str): User's email address\n        password (str): User's password\n\n    Returns:\n        dict: Session data on success or error message\n    \"\"\"\n    try:\n        # Authenticate with Supabase\n        result = supabase.auth.sign_in_with_password({\n            \"email\": email,\n            \"password\": password\n        })\n\n        # Set session data in Flask\n        session['access_token'] = result.session.access_token\n        session['user_id'] = result.user.id\n        session['email'] = result.user.email\n\n        return {\"success\": True, \"user_id\": result.user.id}\n\n    except Exception as e:\n        logger.error(f\"Sign-in error: {e}\")\n        return {\"success\": False, \"error\": str(e)}\n</code></pre>"},{"location":"modules/authentication/#authorization-decorator","title":"Authorization Decorator","text":"<p>The module provides a decorator for route protection:</p> <pre><code>def login_required(view_function):\n    \"\"\"\n    Decorator to require login for a route\n\n    Args:\n        view_function: The route function to protect\n\n    Returns:\n        function: Wrapped function that checks authentication\n    \"\"\"\n    @functools.wraps(view_function)\n    def wrapped_view(*args, **kwargs):\n        # Check if user is logged in\n        if 'user_id' not in session:\n            # Redirect to login page\n            return redirect(url_for('login', next=request.url))\n\n        # User is authenticated, proceed\n        return view_function(*args, **kwargs)\n\n    return wrapped_view\n</code></pre>"},{"location":"modules/authentication/#password-management","title":"Password Management","text":"<pre><code>def reset_password(email):\n    \"\"\"\n    Initiate password reset process\n\n    Args:\n        email (str): User's email address\n\n    Returns:\n        dict: Success or error message\n    \"\"\"\n    try:\n        # Send password reset email via Supabase\n        supabase.auth.reset_password_email(email)\n        return {\"success\": True}\n\n    except Exception as e:\n        logger.error(f\"Password reset error: {e}\")\n        return {\"success\": False, \"error\": str(e)}\n</code></pre>"},{"location":"modules/authentication/#session-expiry-and-refresh","title":"Session Expiry and Refresh","text":"<pre><code>def refresh_session():\n    \"\"\"\n    Refresh the user's session token\n\n    Returns:\n        bool: True if refreshed successfully\n    \"\"\"\n    try:\n        # Check for existing session\n        if 'access_token' not in session:\n            return False\n\n        # Refresh the session with Supabase\n        result = supabase.auth.refresh_session()\n\n        # Update session data\n        session['access_token'] = result.session.access_token\n        return True\n\n    except Exception as e:\n        logger.error(f\"Session refresh error: {e}\")\n        # Clear invalid session\n        session.clear()\n        return False\n</code></pre>"},{"location":"modules/authentication/#security-features","title":"Security Features","text":""},{"location":"modules/authentication/#csrf-protection","title":"CSRF Protection","text":"<pre><code># In app.py\ncsrf = CSRFProtect()\ncsrf.init_app(app)\n\n# In forms\n&lt;input type=\"hidden\" name=\"csrf_token\" value=\"{{ csrf_token() }}\"/&gt;\n</code></pre>"},{"location":"modules/authentication/#password-security","title":"Password Security","text":"<ul> <li>Passwords are never stored in plaintext</li> <li>Supabase handles password hashing and security</li> <li>Password complexity requirements are enforced:</li> <li>Minimum 8 characters</li> <li>Mix of uppercase, lowercase, and numbers</li> </ul>"},{"location":"modules/authentication/#session-security","title":"Session Security","text":"<pre><code># In app.py\napp.config['SESSION_COOKIE_SECURE'] = True  # For HTTPS\napp.config['SESSION_COOKIE_HTTPONLY'] = True  # Prevents JavaScript access\napp.config['PERMANENT_SESSION_LIFETIME'] = timedelta(days=7)  # Session timeout\n</code></pre>"},{"location":"modules/authentication/#error-handling","title":"Error Handling","text":"<p>The auth module implements robust error handling for authentication failures:</p> <pre><code>def handle_auth_errors(error_message):\n    \"\"\"\n    Process authentication error messages\n\n    Args:\n        error_message (str): Raw error message\n\n    Returns:\n        str: User-friendly error message\n    \"\"\"\n    if \"invalid login credentials\" in error_message.lower():\n        return \"Invalid email or password. Please try again.\"\n    elif \"user already registered\" in error_message.lower():\n        return \"This email address is already registered.\"\n    elif \"email not confirmed\" in error_message.lower():\n        return \"Please confirm your email address before logging in.\"\n    else:\n        # Log the unexpected error\n        logger.error(f\"Unexpected authentication error: {error_message}\")\n        return \"An authentication error occurred. Please try again later.\"\n</code></pre>"},{"location":"modules/authentication/#integration-points","title":"Integration Points","text":"<p>The authentication module integrates with several other components:</p> <ul> <li>Flask Application: Provides session management and route protection</li> <li>Supabase: Handles the actual authentication logic and user storage</li> <li>User Interface: Login, signup, and password reset forms</li> <li>Profile System: User profile data linked to authentication records</li> </ul>"},{"location":"modules/authentication/#user-flows","title":"User Flows","text":""},{"location":"modules/authentication/#sign-up-flow","title":"Sign-up Flow","text":"<ol> <li>User submits signup form with email, password, and name</li> <li>System validates input and checks for existing accounts</li> <li>Supabase creates the user and sends verification email</li> <li>User profile record is created in database</li> <li>User is redirected to email verification notice</li> </ol>"},{"location":"modules/authentication/#login-flow","title":"Login Flow","text":"<ol> <li>User submits login form with email and password</li> <li>System validates credentials against Supabase</li> <li>On success, session is created with appropriate tokens</li> <li>User is redirected to their dashboard</li> <li>On failure, appropriate error message is displayed</li> </ol>"},{"location":"modules/authentication/#password-reset-flow","title":"Password Reset Flow","text":"<ol> <li>User requests password reset with email</li> <li>System sends reset email via Supabase</li> <li>User clicks link in email</li> <li>User sets new password</li> <li>Session is updated with new credentials</li> </ol>"},{"location":"modules/document-processing/","title":"Document Processing Module","text":"<p>The document processing module in BookTranslationPro is responsible for extracting, segmenting, and managing text from various document formats.</p>"},{"location":"modules/document-processing/#architecture","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502             Document Processing Module             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Format      \u2502  Text         \u2502  Document          \u2502\n\u2502 Conversion  \u2502  Extraction   \u2502  Segmentation      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Version     \u2502  Storage      \u2502  Export            \u2502\n\u2502 Management  \u2502  Management   \u2502  Generation        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"modules/document-processing/#supported-formats","title":"Supported Formats","text":"<p>The module supports multiple document formats:</p> Format Extensions Processing Method PDF .pdf PyPDF2, pdfplumber Word .docx, .doc python-docx, textract Text .txt Direct text reading Rich Text .rtf striprtf OpenDocument .odt odfpy"},{"location":"modules/document-processing/#implementation","title":"Implementation","text":""},{"location":"modules/document-processing/#format-detection","title":"Format Detection","text":"<pre><code>def detect_file_format(filename):\n    \"\"\"\n    Detects the format of a file based on its extension\n\n    Args:\n        filename (str): Name of the file\n\n    Returns:\n        str: Format type or None if unsupported\n    \"\"\"\n    extension = os.path.splitext(filename)[1].lower()\n\n    format_map = {\n        '.pdf': 'pdf',\n        '.docx': 'docx',\n        '.doc': 'doc',\n        '.txt': 'text',\n        '.rtf': 'rtf',\n        '.odt': 'odt'\n    }\n\n    return format_map.get(extension)\n</code></pre>"},{"location":"modules/document-processing/#text-extraction","title":"Text Extraction","text":"<p>The module implements a multi-strategy approach to text extraction:</p> <pre><code>def extract_text_from_file(file_path, file_type=None):\n    \"\"\"\n    Extracts text from various file formats\n\n    Args:\n        file_path (str): Path to the file\n        file_type (str, optional): Format type (auto-detected if None)\n\n    Returns:\n        str: Extracted text content\n    \"\"\"\n    if file_type is None:\n        file_type = detect_file_format(file_path)\n\n    if file_type == 'pdf':\n        return extract_text_from_pdf(file_path)\n    elif file_type in ('docx', 'doc'):\n        return extract_text_from_word(file_path, file_type)\n    elif file_type == 'text':\n        return extract_text_from_txt(file_path)\n    elif file_type == 'rtf':\n        return extract_text_from_rtf(file_path)\n    elif file_type == 'odt':\n        return extract_text_from_odt(file_path)\n    else:\n        raise UnsupportedFormatError(f\"Unsupported file format: {file_type}\")\n</code></pre>"},{"location":"modules/document-processing/#pdf-extraction","title":"PDF Extraction","text":"<pre><code>def extract_text_from_pdf(file_path):\n    \"\"\"\n    Extracts text from PDF using multiple strategies\n\n    Args:\n        file_path (str): Path to the PDF file\n\n    Returns:\n        str: Extracted text\n    \"\"\"\n    text = \"\"\n\n    # Try with PyPDF2 first\n    try:\n        with open(file_path, 'rb') as file:\n            reader = PyPDF2.PdfReader(file)\n            for page in reader.pages:\n                text += page.extract_text() + \"\\n\\n\"\n    except Exception as e:\n        logger.warning(f\"PyPDF2 extraction failed: {e}\")\n\n    # If PyPDF2 returned empty or failed, try pdfplumber\n    if not text.strip():\n        try:\n            with pdfplumber.open(file_path) as pdf:\n                for page in pdf.pages:\n                    page_text = page.extract_text() or \"\"\n                    text += page_text + \"\\n\\n\"\n        except Exception as e:\n            logger.warning(f\"pdfplumber extraction failed: {e}\")\n\n    # If all methods failed, raise exception\n    if not text.strip():\n        raise ExtractionError(\"Failed to extract text from PDF\")\n\n    return text\n</code></pre>"},{"location":"modules/document-processing/#document-segmentation","title":"Document Segmentation","text":"<p>Once text is extracted, it needs to be segmented into manageable chunks:</p> <pre><code>def segment_text(text, max_length=1000, preserve_paragraphs=True):\n    \"\"\"\n    Segments text into pages of manageable size\n\n    Args:\n        text (str): Text to segment\n        max_length (int): Maximum length per segment\n        preserve_paragraphs (bool): Try to keep paragraphs intact\n\n    Returns:\n        list: List of text segments\n    \"\"\"\n    if not text:\n        return []\n\n    # Split text into paragraphs\n    paragraphs = text.split('\\n\\n')\n\n    segments = []\n    current_segment = \"\"\n\n    for paragraph in paragraphs:\n        # If adding this paragraph would exceed max_length\n        if len(current_segment) + len(paragraph) &gt; max_length and current_segment:\n            # Add current segment to results and start a new one\n            segments.append(current_segment.strip())\n            current_segment = paragraph\n        else:\n            # Add paragraph to current segment\n            if current_segment:\n                current_segment += \"\\n\\n\" + paragraph\n            else:\n                current_segment = paragraph\n\n    # Add the last segment if not empty\n    if current_segment:\n        segments.append(current_segment.strip())\n\n    return segments\n</code></pre>"},{"location":"modules/document-processing/#document-storage","title":"Document Storage","text":"<p>Processed documents and segments are stored in the database:</p> <pre><code>def store_document(user_id, title, file_path, language, target_lang, folder=None):\n    \"\"\"\n    Processes and stores a document\n\n    Args:\n        user_id (str): ID of the user uploading the document\n        title (str): Document title\n        file_path (str): Path to the uploaded file\n        language (str): Source language code\n        target_lang (str): Target language code\n        folder (str, optional): Folder/series for organization\n\n    Returns:\n        str: Document ID\n    \"\"\"\n    try:\n        # Detect file format\n        file_format = detect_file_format(file_path)\n\n        # Extract text\n        text = extract_text_from_file(file_path, file_format)\n\n        # Segment text\n        segments = segment_text(text)\n\n        # Create document record\n        document_data = {\n            \"user_id\": user_id,\n            \"title\": title,\n            \"language\": language,\n            \"target_lang\": target_lang,\n            \"folder\": folder,\n            \"status\": \"processing\",\n            \"created_at\": datetime.now().isoformat()\n        }\n\n        # Insert document in database\n        document = supabase.table(\"documents\").insert(document_data).execute()\n        document_id = document.data[0]['id']\n\n        # Store segments as pages\n        for i, segment in enumerate(segments):\n            page_data = {\n                \"document_id\": document_id,\n                \"page_number\": i + 1,\n                \"source_text\": segment,\n                \"translated_text\": \"\",\n                \"status\": \"pending\",\n                \"created_at\": datetime.now().isoformat()\n            }\n            supabase.table(\"document_pages\").insert(page_data).execute()\n\n        # Update document status\n        supabase.table(\"documents\").update(\n            {\"status\": \"ready\"}\n        ).eq(\"id\", document_id).execute()\n\n        return document_id\n\n    except Exception as e:\n        logger.error(f\"Error processing document: {e}\")\n        raise\n</code></pre>"},{"location":"modules/document-processing/#version-control-system","title":"Version Control System","text":"<p>The module implements document versioning for tracking changes:</p> <pre><code>def create_document_version(document_id):\n    \"\"\"\n    Creates a new version of a document\n\n    Args:\n        document_id (str): ID of the document\n\n    Returns:\n        int: Version number\n    \"\"\"\n    try:\n        # Get latest version number\n        versions = supabase.table(\"doc_versions\").select(\"version\") \\\n            .eq(\"document_id\", document_id) \\\n            .order(\"version\", desc=True) \\\n            .limit(1) \\\n            .execute()\n\n        version_number = 1\n        if versions.data:\n            version_number = versions.data[0]['version'] + 1\n\n        # Create new version record\n        version_data = {\n            \"document_id\": document_id,\n            \"version\": version_number,\n            \"created_at\": datetime.now().isoformat()\n        }\n        supabase.table(\"doc_versions\").insert(version_data).execute()\n\n        # Create page versions\n        pages = supabase.table(\"document_pages\") \\\n            .select(\"id,source_text,translated_text\") \\\n            .eq(\"document_id\", document_id) \\\n            .execute()\n\n        for page in pages.data:\n            page_version = {\n                \"page_id\": page['id'],\n                \"version\": version_number,\n                \"source_text\": page['source_text'],\n                \"translated_text\": page['translated_text'],\n                \"created_at\": datetime.now().isoformat()\n            }\n            supabase.table(\"page_versions\").insert(page_version).execute()\n\n        return version_number\n\n    except Exception as e:\n        logger.error(f\"Error creating document version: {e}\")\n        raise\n</code></pre>"},{"location":"modules/document-processing/#export-system","title":"Export System","text":"<p>The module handles exporting translations in various formats:</p> <pre><code>def export_document(document_id, format=\"docx\"):\n    \"\"\"\n    Exports a translated document\n\n    Args:\n        document_id (str): ID of the document\n        format (str): Export format ('docx', 'pdf', 'txt', 'html')\n\n    Returns:\n        str: Path to the exported file\n    \"\"\"\n    # Get document info\n    document = supabase.table(\"documents\") \\\n        .select(\"title,language,target_lang\") \\\n        .eq(\"id\", document_id) \\\n        .single() \\\n        .execute()\n\n    doc_info = document.data\n\n    # Get translated pages in order\n    pages = supabase.table(\"document_pages\") \\\n        .select(\"translated_text\") \\\n        .eq(\"document_id\", document_id) \\\n        .order(\"page_number\") \\\n        .execute()\n\n    translated_text = \"\\n\\n\".join([p['translated_text'] for p in pages.data])\n\n    # Create export file based on format\n    if format == \"docx\":\n        return export_to_docx(doc_info['title'], translated_text)\n    elif format == \"pdf\":\n        return export_to_pdf(doc_info['title'], translated_text)\n    elif format == \"txt\":\n        return export_to_txt(doc_info['title'], translated_text)\n    elif format == \"html\":\n        return export_to_html(doc_info['title'], translated_text)\n    else:\n        raise ValueError(f\"Unsupported export format: {format}\")\n</code></pre>"},{"location":"modules/document-processing/#export-formatters","title":"Export Formatters","text":"<pre><code>def export_to_docx(title, text):\n    \"\"\"\n    Exports text to DOCX format\n\n    Args:\n        title (str): Document title\n        text (str): Translated text\n\n    Returns:\n        str: Path to the exported file\n    \"\"\"\n    document = Document()\n    document.add_heading(title, 0)\n\n    # Split by paragraphs and add to document\n    paragraphs = text.split('\\n\\n')\n    for para in paragraphs:\n        if para.strip():\n            document.add_paragraph(para.strip())\n\n    # Save the document\n    filename = f\"{slugify(title)}.docx\"\n    output_path = os.path.join(TEMP_DIR, filename)\n    document.save(output_path)\n\n    return output_path\n</code></pre>"},{"location":"modules/document-processing/#error-handling","title":"Error Handling","text":"<p>The module implements comprehensive error handling for document processing:</p> <pre><code>class DocumentProcessingError(Exception):\n    \"\"\"Base class for document processing errors\"\"\"\n    pass\n\nclass UnsupportedFormatError(DocumentProcessingError):\n    \"\"\"Raised when file format is not supported\"\"\"\n    pass\n\nclass ExtractionError(DocumentProcessingError):\n    \"\"\"Raised when text extraction fails\"\"\"\n    pass\n\nclass SegmentationError(DocumentProcessingError):\n    \"\"\"Raised when text segmentation fails\"\"\"\n    pass\n\ndef safe_process_document(user_id, title, file_path, language, target_lang, folder=None):\n    \"\"\"\n    Safely processes a document with error handling\n\n    Args:\n        user_id (str): ID of the user uploading the document\n        title (str): Document title\n        file_path (str): Path to the uploaded file\n        language (str): Source language code\n        target_lang (str): Target language code\n        folder (str, optional): Folder/series for organization\n\n    Returns:\n        dict: Result containing success status and document ID or error\n    \"\"\"\n    try:\n        document_id = store_document(user_id, title, file_path, language, target_lang, folder)\n        return {\"success\": True, \"document_id\": document_id}\n    except UnsupportedFormatError as e:\n        logger.error(f\"Unsupported file format: {e}\")\n        return {\"success\": False, \"error\": \"This file format is not supported.\"}\n    except ExtractionError as e:\n        logger.error(f\"Text extraction failed: {e}\")\n        return {\"success\": False, \"error\": \"Could not extract text from this file.\"}\n    except Exception as e:\n        logger.error(f\"Document processing error: {e}\", exc_info=True)\n        return {\"success\": False, \"error\": \"An error occurred while processing the document.\"}\n</code></pre>"},{"location":"modules/document-processing/#integration-points","title":"Integration Points","text":"<p>The document processing module integrates with these components:</p> <ul> <li>Upload Interface: Handles file uploads from users</li> <li>Database Layer: Stores documents, pages, and versions</li> <li>Translation Module: Receives segmented text for translation</li> <li>Export Interface: Generates files in requested formats</li> </ul>"},{"location":"modules/document-processing/#performance-optimizations","title":"Performance Optimizations","text":"<p>For large documents, the module implements several optimizations:</p> <ol> <li>Chunked Processing: Documents are processed in chunks to avoid memory issues</li> <li>Background Processing: Long-running tasks are processed in background workers</li> <li>Progress Tracking: Real-time progress updates for long-running operations</li> <li>Caching: Commonly accessed documents are cached for faster access</li> </ol>"},{"location":"modules/translation/","title":"Translation Module","text":"<p>The translation module is at the core of BookTranslationPro, providing the functionality for translating documents, managing translation memory, and integrating with AI services.</p>"},{"location":"modules/translation/#architecture","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                Translation Module                 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Translation \u2502  Translation  \u2502  AI Review         \u2502\n\u2502 Engine      \u2502  Memory       \u2502  Integration       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Glossary    \u2502  Segment      \u2502  Progress          \u2502\n\u2502 Management  \u2502  Management   \u2502  Tracking          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"modules/translation/#key-components","title":"Key Components","text":""},{"location":"modules/translation/#translation-engine","title":"Translation Engine","text":"<p>The translation engine manages the core translation process:</p> <pre><code>def translate_text(text, source_lang, target_lang, glossary_id=None):\n    \"\"\"\n    Translates text using DeepL API with optional glossary application\n\n    Args:\n        text (str): Text to translate\n        source_lang (str): Source language code\n        target_lang (str): Target language code\n        glossary_id (str, optional): ID of glossary to apply\n\n    Returns:\n        str: Translated text\n    \"\"\"\n    # Implementation with retry mechanism and error handling\n</code></pre> <p>Key features: - Integration with DeepL API - Error handling and retry mechanism - Glossary application - Rate limiting management</p>"},{"location":"modules/translation/#translation-memory","title":"Translation Memory","text":"<p>Translation memory stores previously translated segments to improve consistency and reduce API calls:</p> <pre><code>def check_translation_memory(text, source_lang, target_lang):\n    \"\"\"\n    Checks if a translation exists in the translation memory\n\n    Args:\n        text (str): Text to look up\n        source_lang (str): Source language code\n        target_lang (str): Target language code\n\n    Returns:\n        str or None: Existing translation or None if not found\n    \"\"\"\n    # Implementation with fuzzy matching capability\n</code></pre> <p>Key features: - Exact and fuzzy matching - Database-backed storage - User-specific and global memory options</p>"},{"location":"modules/translation/#ai-review-integration","title":"AI Review Integration","text":"<p>The AI review system provides quality assessment and improvement suggestions:</p> <pre><code>def review_translation(source_text, translated_text, source_lang, target_lang):\n    \"\"\"\n    Reviews a translation using OpenAI API\n\n    Args:\n        source_text (str): Original text\n        translated_text (str): Translated text\n        source_lang (str): Source language code\n        target_lang (str): Target language code\n\n    Returns:\n        dict: Review results including suggestions and quality score\n    \"\"\"\n    # Implementation using OpenAI assistants\n</code></pre> <p>Key features: - Integration with OpenAI Assistants API - Contextual review based on document type - Suggestion categorization (style, accuracy, grammar)</p>"},{"location":"modules/translation/#glossary-management","title":"Glossary Management","text":"<p>The glossary system maintains consistent terminology across translations:</p> <pre><code>def apply_glossary(text, glossary_entries):\n    \"\"\"\n    Applies glossary entries to text\n\n    Args:\n        text (str): Text to process\n        glossary_entries (list): List of term pairs\n\n    Returns:\n        str: Text with glossary terms applied\n    \"\"\"\n    # Implementation with term recognition\n</code></pre> <p>Key features: - Term pair management - DeepL glossary integration - Local glossary application for non-DeepL languages</p>"},{"location":"modules/translation/#data-flow","title":"Data Flow","text":"<ol> <li>Initial Translation Process:</li> <li> <p>Document text \u2192 Check translation memory \u2192 If not found, send to DeepL API \u2192 Apply glossary \u2192 Store in database</p> </li> <li> <p>Translation Update Process:</p> </li> <li> <p>User edits translation \u2192 Update in database \u2192 Update translation memory</p> </li> <li> <p>AI Review Process:</p> </li> <li>User requests review \u2192 Send source and translation to OpenAI \u2192 Process suggestions \u2192 Present to user</li> </ol>"},{"location":"modules/translation/#integration-points","title":"Integration Points","text":"<ul> <li>DeepL API: Primary machine translation provider</li> <li>OpenAI API: For AI-assisted review and suggestions</li> <li>Database: Storage for translations and translation memory</li> <li>UI Layer: Translation workspace interface</li> </ul>"},{"location":"modules/translation/#error-handling","title":"Error Handling","text":"<p>The translation module implements robust error handling:</p> <ul> <li>API timeouts and rate limit handling</li> <li>Graceful degradation when services are unavailable</li> <li>Logging of translation errors for analysis</li> <li>User feedback for failed operations</li> </ul>"},{"location":"modules/translation/#performance-considerations","title":"Performance Considerations","text":"<p>To maintain good performance:</p> <ul> <li>Translation memory reduces API calls</li> <li>Batch translation for efficiency</li> <li>Caching of frequently accessed translations</li> <li>Asynchronous processing for large documents</li> </ul>"},{"location":"modules/ui-components/","title":"Ui Components","text":"<p>This documentation is under development.</p>"},{"location":"modules/ui-components/#overview","title":"Overview","text":"<p>This page will document the Ui Components module functionality.</p>"},{"location":"modules/ui-components/#technical-details","title":"Technical Details","text":"<p>This section will include technical details about the ui components.</p>"},{"location":"modules/ui-components/#related-components","title":"Related Components","text":"<ul> <li>Link to related component 1</li> <li>Link to related component 2</li> </ul>"},{"location":"setup/configuration/","title":"Configuration","text":"<p>This documentation is under development.</p>"},{"location":"setup/configuration/#overview","title":"Overview","text":"<p>This page will provide instructions for Configuration.</p>"},{"location":"setup/configuration/#technical-details","title":"Technical Details","text":"<p>This section will include technical details about the configuration.</p>"},{"location":"setup/configuration/#related-components","title":"Related Components","text":"<ul> <li>Link to related component 1</li> <li>Link to related component 2</li> </ul>"},{"location":"setup/environment/","title":"Environment","text":"<p>This documentation is under development.</p>"},{"location":"setup/environment/#overview","title":"Overview","text":"<p>This page will provide instructions for Environment.</p>"},{"location":"setup/environment/#technical-details","title":"Technical Details","text":"<p>This section will include technical details about the environment.</p>"},{"location":"setup/environment/#related-components","title":"Related Components","text":"<ul> <li>Link to related component 1</li> <li>Link to related component 2</li> </ul>"},{"location":"setup/installation/","title":"Installation Guide","text":"<p>This guide provides step-by-step instructions for setting up BookTranslationPro for development or production use.</p>"},{"location":"setup/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9 or higher</li> <li>PostgreSQL database (or Supabase account)</li> <li>DeepL API key (for translation)</li> <li>OpenAI API key (for AI review)</li> <li>PostHog API key (optional, for analytics)</li> </ul>"},{"location":"setup/installation/#development-setup","title":"Development Setup","text":""},{"location":"setup/installation/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/yourusername/BookTranslationPro.git\ncd BookTranslationPro\n</code></pre>"},{"location":"setup/installation/#2-create-a-virtual-environment","title":"2. Create a Virtual Environment","text":"<pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n</code></pre>"},{"location":"setup/installation/#3-install-dependencies","title":"3. Install Dependencies","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"setup/installation/#4-set-up-environment-variables","title":"4. Set Up Environment Variables","text":"<p>Create a <code>.env</code> file in the project root with the following variables:</p> <pre><code># Database Configuration\nSUPABASE_URL=your_supabase_url\nSUPABASE_KEY=your_supabase_key\nSUPABASE_SERVICE_KEY=your_supabase_service_key\n\n# Translation APIs\nDEEPL_API_KEY=your_deepl_api_key\nOPENAI_API_KEY=your_openai_api_key\n\n# Application Settings\nSECRET_KEY=your_flask_secret_key\nDEBUG=True\n\n# Optional: Analytics\nPOSTHOG_API_KEY=your_posthog_api_key\n</code></pre>"},{"location":"setup/installation/#5-initialize-the-database","title":"5. Initialize the Database","text":"<pre><code>python -c \"from app import create_tables; create_tables()\"\n# Or use Supabase SQL Editor to run the setup_tables.sql script\n</code></pre>"},{"location":"setup/installation/#6-run-the-development-server","title":"6. Run the Development Server","text":"<pre><code>python app.py\n</code></pre> <p>The application will be available at <code>http://localhost:5000</code>.</p>"},{"location":"setup/installation/#production-deployment","title":"Production Deployment","text":"<p>For production deployments, additional configurations are recommended:</p>"},{"location":"setup/installation/#using-gunicorn","title":"Using Gunicorn","text":"<pre><code>gunicorn main:app -c gunicorn_config.py\n</code></pre>"},{"location":"setup/installation/#environment-settings","title":"Environment Settings","text":"<p>For production, update your <code>.env</code> file:</p> <pre><code>DEBUG=False\nSECRET_KEY=your_secure_secret_key  # Generate a strong key\n</code></pre>"},{"location":"setup/installation/#database-considerations","title":"Database Considerations","text":"<ul> <li>Set up proper database indexes for performance</li> <li>Configure database connection pool size in <code>supabase_config.py</code></li> <li>Consider setting up database backups</li> </ul>"},{"location":"setup/installation/#security-recommendations","title":"Security Recommendations","text":"<ul> <li>Use HTTPS via a reverse proxy (Nginx, Apache)</li> <li>Set secure cookie settings in production</li> <li>Configure proper content security policy headers</li> <li>Regularly update dependencies</li> </ul>"},{"location":"setup/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"setup/installation/#common-issues","title":"Common Issues","text":"<ol> <li>Database Connection Errors</li> <li>Verify Supabase credentials</li> <li> <p>Check network connectivity to Supabase</p> </li> <li> <p>API Integration Failures</p> </li> <li>Validate API keys</li> <li>Check API rate limits</li> <li> <p>Review error logs for specific issues</p> </li> <li> <p>Document Processing Issues</p> </li> <li>Install necessary system dependencies for PDF extraction</li> <li>Check file permissions for temporary file directories</li> </ol>"},{"location":"setup/installation/#logging","title":"Logging","text":"<p>The application uses Python's logging system. To increase verbosity:</p> <pre><code># In app.py or by setting environment variables\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\n</code></pre> <p>Logs can help identify issues with API integrations, file processing, or database operations.</p>"},{"location":"user-workflows/document-upload/","title":"Document Upload","text":"<p>This documentation is under development.</p>"},{"location":"user-workflows/document-upload/#overview","title":"Overview","text":"<p>This page will document the Document Upload process.</p>"},{"location":"user-workflows/document-upload/#technical-details","title":"Technical Details","text":"<p>This section will include technical details about the document upload.</p>"},{"location":"user-workflows/document-upload/#related-components","title":"Related Components","text":"<ul> <li>Link to related component 1</li> <li>Link to related component 2</li> </ul>"},{"location":"user-workflows/export/","title":"Export","text":"<p>This documentation is under development.</p>"},{"location":"user-workflows/export/#overview","title":"Overview","text":"<p>This page will document the Export process.</p>"},{"location":"user-workflows/export/#technical-details","title":"Technical Details","text":"<p>This section will include technical details about the export.</p>"},{"location":"user-workflows/export/#related-components","title":"Related Components","text":"<ul> <li>Link to related component 1</li> <li>Link to related component 2</li> </ul>"},{"location":"user-workflows/translation/","title":"Translation Workflow","text":"<p>This document describes the technical implementation of the translation workflow in BookTranslationPro, from initial machine translation to final review and export.</p>"},{"location":"user-workflows/translation/#workflow-diagram","title":"Workflow Diagram","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Document    \u2502     \u2502 Machine     \u2502     \u2502 Human       \u2502     \u2502 AI Review   \u2502\n\u2502 Upload      \u2502\u2500\u2500\u2500\u2500\u25ba\u2502 Translation \u2502\u2500\u2500\u2500\u2500\u25ba\u2502 Translation \u2502\u2500\u2500\u2500\u2500\u25ba\u2502 &amp; Export    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      \u2502                    \u2502                   \u2502                   \u2502\n      \u25bc                    \u25bc                   \u25bc                   \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Extract     \u2502     \u2502 Apply       \u2502     \u2502 Update      \u2502     \u2502 Generate    \u2502\n\u2502 Content     \u2502     \u2502 Glossary    \u2502     \u2502 Translation \u2502     \u2502 Export      \u2502\n\u2502 &amp; Segment   \u2502     \u2502 &amp; Memory    \u2502     \u2502 Memory      \u2502     \u2502 Files       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-workflows/translation/#1-document-processing","title":"1. Document Processing","text":""},{"location":"user-workflows/translation/#technical-implementation","title":"Technical Implementation","text":"<p>The document processing flow is handled by the following functions in <code>utils.py</code>:</p> <pre><code>def extract_text_from_file(file_path, file_type):\n    # Extracts text from various file formats\n    # Uses multiple extraction methods with fallbacks\n\ndef segment_text(text, max_length=1000):\n    # Segments text into manageable pages\n    # Tries to maintain paragraph integrity\n</code></pre> <p>When a document is uploaded:</p> <ol> <li>The file is stored in Supabase storage</li> <li>Text extraction is performed based on file type</li> <li>The extracted text is segmented into pages</li> <li>Pages are stored in the <code>document_pages</code> table</li> <li>Initial document metadata is created in the <code>documents</code> table</li> </ol>"},{"location":"user-workflows/translation/#key-classes-and-functions","title":"Key Classes and Functions","text":"<ul> <li><code>app.py</code>: Contains route handlers for document upload</li> <li><code>utils.py</code>: Contains text extraction and processing functions</li> <li>Database tables: <code>documents</code>, <code>document_pages</code></li> </ul>"},{"location":"user-workflows/translation/#2-machine-translation","title":"2. Machine Translation","text":""},{"location":"user-workflows/translation/#technical-implementation_1","title":"Technical Implementation","text":"<p>Machine translation is performed via the DeepL API:</p> <pre><code>def translate_document(document_id, user_id):\n    # 1. Retrieves all pages for the document\n    # 2. For each page, performs machine translation\n    # 3. Updates the database with translations\n    # 4. Marks document as machine-translated\n</code></pre> <p>The translation process:</p> <ol> <li>Each page is sent to the DeepL API with target language</li> <li>Translation memory is checked first to avoid redundant translations</li> <li>If glossary exists, it's applied to the translation</li> <li>Translated text is stored in the <code>document_pages</code> table</li> <li>Document status is updated to reflect machine translation completion</li> </ol>"},{"location":"user-workflows/translation/#key-classes-and-functions_1","title":"Key Classes and Functions","text":"<ul> <li><code>utils.py</code>: Contains the DeepL API integration</li> <li><code>app.py</code>: Contains route handlers for initiating translation</li> <li>Database tables: <code>document_pages</code>, <code>translation_memory</code></li> </ul>"},{"location":"user-workflows/translation/#3-human-translation","title":"3. Human Translation","text":""},{"location":"user-workflows/translation/#technical-implementation_2","title":"Technical Implementation","text":"<p>The translation workspace is implemented as an interactive web interface:</p> <pre><code>@app.route('/translation-workspace/&lt;document_id&gt;/&lt;page_number&gt;', methods=['GET', 'POST'])\ndef translation_workspace(document_id, page_number):\n    # Renders the translation workspace for a specific page\n    # Handles saving of user edits\n</code></pre> <p>When users edit translations:</p> <ol> <li>Changes are saved to the <code>document_pages</code> table</li> <li>Page status is updated to reflect human review</li> <li>Page versions are tracked in the <code>page_versions</code> table</li> <li>Translation memory is updated with the new translations</li> </ol>"},{"location":"user-workflows/translation/#key-classes-and-functions_2","title":"Key Classes and Functions","text":"<ul> <li><code>app.py</code>: Contains route handlers for the translation workspace</li> <li><code>templates/translation_workspace.html</code>: The UI for translation editing</li> <li>Database tables: <code>document_pages</code>, <code>page_versions</code>, <code>translation_memory</code></li> </ul>"},{"location":"user-workflows/translation/#4-ai-review-and-export","title":"4. AI Review and Export","text":""},{"location":"user-workflows/translation/#technical-implementation_3","title":"Technical Implementation","text":"<p>AI review uses OpenAI Assistant API:</p> <pre><code>def review_translation(page_id, user_id):\n    # 1. Retrieves page content\n    # 2. Sends to OpenAI Assistant with appropriate instructions\n    # 3. Processes suggestions and feedback\n    # 4. Returns AI review results\n</code></pre> <p>Export functionality converts translations to various formats:</p> <pre><code>def export_document(document_id, format, user_id):\n    # 1. Retrieves all translated pages\n    # 2. Formats content according to chosen format\n    # 3. Generates output file\n</code></pre>"},{"location":"user-workflows/translation/#key-classes-and-functions_3","title":"Key Classes and Functions","text":"<ul> <li><code>create_assistant.py</code>: Contains OpenAI Assistant setup</li> <li><code>app.py</code>: Contains route handlers for review and export</li> <li><code>utils.py</code>: Contains export formatting functions</li> <li>Database tables: <code>document_pages</code>, <code>assistants</code></li> </ul>"},{"location":"user-workflows/translation/#data-flow-between-components","title":"Data Flow Between Components","text":""},{"location":"user-workflows/translation/#translation-memory-integration","title":"Translation Memory Integration","text":"<pre><code>def update_translation_memory(source_text, translated_text, source_lang, target_lang, user_id):\n    # Adds or updates translation memory entries\n</code></pre> <p>Translation memory is: 1. Checked before machine translation to avoid redundancy 2. Updated when users edit translations 3. Used to suggest translations for similar text</p>"},{"location":"user-workflows/translation/#glossary-integration","title":"Glossary Integration","text":"<pre><code>def apply_glossary(text, glossary_id, source_lang, target_lang):\n    # Applies glossary terms to translations\n</code></pre> <p>Glossaries are: 1. Applied during machine translation 2. Highlighted in the translation workspace 3. Can be managed through the glossary interface</p>"},{"location":"user-workflows/translation/#version-control-system","title":"Version Control System","text":"<pre><code>def create_page_version(page_id):\n    # Creates a new version record for a page\n</code></pre> <p>Version control: 1. Tracks all changes to translations 2. Enables rollback to previous versions 3. Stores version history for audit purposes</p>"},{"location":"user-workflows/translation/#error-handling-and-recovery","title":"Error Handling and Recovery","text":"<p>The workflow implements several error handling mechanisms:</p> <ol> <li>Failed API calls (DeepL, OpenAI) are retried with exponential backoff</li> <li>Partial failures during batch operations are logged and reported</li> <li>Auto-save functionality prevents data loss during translation</li> <li>Database transactions ensure data consistency</li> </ol>"},{"location":"user-workflows/translation/#performance-considerations","title":"Performance Considerations","text":"<p>To maintain good performance for large documents:</p> <ol> <li>Pages are processed asynchronously for machine translation</li> <li>Translation memory reduces redundant API calls</li> <li>UI optimizations in the translation workspace for smooth editing</li> <li>Background processing for export of large documents</li> </ol>"}]}